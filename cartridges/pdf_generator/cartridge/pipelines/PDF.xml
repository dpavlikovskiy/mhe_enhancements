<?xml version="1.0" encoding="UTF-8" ?>
<?demandware-pipeline version="2.0"?>

<pipeline type="view">
  <branch basename="_ANONYMOUS_BRANCH_1">
    <segment>
      <node>
        <text-node>
          <description>Submits an AJAX request that &quot;calls&quot; the markup to be rendered as pdf. Then the markup is passed to GAE service to be rendered as pdf.

Requires Parmeter &quot;url&quot;: This parameter denotes the pipeline that renders the html markup to be converted into pdf. Must be encoded as base64.</description>
        </text-node>
        <node-display height="2" width="2" x="1" y="0"/>
      </node>
    </segment>
  </branch>
  <branch basename="Generate">
    <segment>
      <node>
        <start-node name="Generate" secure="false">
          <start-parameter value="url">
            <description>This parameter denotes the pipeline that renders the html markup to be converted into pdf. Must be encoded as base64.</description>
          </start-parameter>
        </start-node>
        <node-display x="1" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="pdf/CheckExistingInvoiceFile.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap.OrderNumber.value" key="OrderNumber"/>
          <key-binding alias="FileNameWithPath" key="fileNameWithPath"/>
          <key-binding alias="dw.web.URLUtils.http('PDF-InvoiceData').toString()" key="URL"/>
          <key-binding alias="PDFContent" key="PDFContent"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="!empty(CurrentHttpParameterMap.url.value)" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="yes">
          <transition target-connector="in"/>
          <segment>
            <node>
              <interaction-node transaction-required="false">
                <template buffered="true" dynamic="false" name="pdf/pdf_generate"/>
              </interaction-node>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="2" y="0"/>
          <bend-point relative-to="target" x="0" y="-1"/>
        </transition-display>
      </simple-transition>
      <node>
        <jump-node start-name-ref="Home-ErrorNotFound"/>
        <node-display x="1" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_3">
    <segment>
      <node>
        <text-node>
          <description>Using this method is only recommended for testing purpose. The reason for that is that the service calls the source URL without maintaining the session state (cookie), means on DW side every time the service calls an URL a new session will be created.</description>
        </text-node>
        <node-display height="2" width="3" x="4" y="0"/>
      </node>
    </segment>
  </branch>
  <branch basename="ViaDW">
    <segment>
      <node>
        <start-node name="ViaDW" secure="false"/>
        <node-display x="4" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="pdf/GeneratePDF.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap.src.stringValue" key="URL"/>
          <key-binding alias="PDFContent" key="PDFContent"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="pdf/pdf_out"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Test">
    <segment>
      <node>
        <start-node name="Test" secure="false"/>
        <node-display x="6" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="pdf/GeneratePDF.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap.src.stringValue" key="URL"/>
          <key-binding alias="PDFContent" key="PDFContent"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="pdf/pdf_out"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Test1">
    <segment>
      <node>
        <start-node name="Test1" secure="false"/>
        <node-display x="7" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="testFile"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="OrderInvoice">
    <segment>
      <node>
        <start-node call-mode="public" name="OrderInvoice" secure="false"/>
        <node-display x="3" y="7"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="GetOrder" pipelet-set-identifier="bc_api">
          <key-binding alias="CurrentHttpParameterMap.OrderId.stringValue" key="OrderNo"/>
          <key-binding alias="Order" key="Order"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in1"/>
          <segment>
            <node>
              <join-node/>
              <node-display x="1" y="0"/>
            </node>
            <transition target-connector="in2" target-path="../+1"/>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="CurrentCustomer.profile.email==Order.customerEmail &amp;&amp; !empty(Order.defaultShipment.trackingNumber)" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b3" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="0" y="1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="false"/>
                <config-property key="OnError" value="PIPELET_ERROR"/>
                <config-property key="ScriptFile" value="pdf/GenerateInvoicePDF.ds"/>
                <key-binding alias="null" key="ScriptLog"/>
                <key-binding alias="PDFContent" key="PDFContent"/>
                <key-binding alias="dw.web.URLUtils.http('PDF-InvoiceData').toString()" key="URL"/>
                <key-binding alias="CurrentHttpParameterMap.OrderId.stringValue" key="OrderNo"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
              <branch basename="b2" source-connector="error">
                <transition target-connector="in2" target-path="../+2"/>
              </branch>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="source" x="0" y="1"/>
              </transition-display>
            </simple-transition>
            <node>
              <interaction-node transaction-required="false">
                <template buffered="true" dynamic="false" name="pdf/pdf_out"/>
              </interaction-node>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="1" y="0"/>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <jump-node start-name-ref="Home-ErrorNotFound"/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="InvoiceData">
    <segment>
      <node>
        <start-node call-mode="public" name="InvoiceData" secure="true"/>
        <node-display x="5" y="7"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="GetOrder" pipelet-set-identifier="bc_api">
          <key-binding alias="dw.util.StringUtils.decodeBase64(CurrentHttpParameterMap.OrderId.stringValue)" key="OrderNo"/>
          <key-binding alias="Order" key="Order"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="2" y="0"/>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <jump-node start-name-ref="Home-ErrorNotFound"/>
              <node-display x="1" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="components/order/orderinvoice"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="GenerateOrderPDF">
    <segment>
      <node>
        <start-node call-mode="public" name="GenerateOrderPDF" secure="true">
          <start-parameter value="url">
            <description>This parameter denotes the pipeline that renders the html markup to be converted into pdf. Must be encoded as base64.</description>
          </start-parameter>
        </start-node>
        <node-display x="1" y="8"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="pdf/CheckExistingInvoiceFile.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap.OrderNumber.value" key="OrderNumber"/>
          <key-binding alias="FileNameWithPath" key="fileNameWithPath"/>
          <key-binding alias="PDFContent" key="PDFContent"/>
          <key-binding alias="dw.web.URLUtils.https('PDF-InvoiceData').toString()" key="URL"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="1" y="0"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <jump-node start-name-ref="Home-ErrorNotFound"/>
              <node-display orientation="horizontal" x="1" y="0"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="pdf/pdf_out"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="RemoveOldInvoiceFiles">
    <segment>
      <node>
        <start-node call-mode="private" name="RemoveOldInvoiceFiles" secure="false"/>
        <node-display x="1" y="12"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="pdf/removeOldInvoiceFiles.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
</pipeline>
