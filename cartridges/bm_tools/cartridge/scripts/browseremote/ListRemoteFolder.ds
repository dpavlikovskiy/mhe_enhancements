/**
* Is listing all content from the given remote folder
*
*
* @input URL : String URL of remote location
* @input PATH : String PATH of remote location
* @input User : String Name of the user
* @input Password : String Password
*
* @output Status : Object Status of the response
* @output ObjectList : Object List of objects that where found in the remote location
*/
importPackage( dw.net );
importPackage( dw.system );
importPackage( dw.util );

function execute( args : PipelineDictionary ) : Number
{

	var url : String = args.URL;
	var user : String = args.User;
	var password : String = args.Password;
	var path : String = args.PATH;
	
	if ( url.lastIndexOf('/') != url.length-1 ) {
		url += '/';
	}
	
	var status : Status = null;

	if ( empty(url) ) {
		status = new Status( Status.ERROR, 'URL not specified');
	} else {
		var result : Object = {"directories":[],"files":[]};

		if ( url.indexOf( "sftp://" ) == 0 )
		{
			status = listRemoteElementsSFTP(url, path, user, password, result);
		}
		else if ( url.indexOf( "ftp://" ) == 0 ) 
		{
			status = listRemoteElementsFTP(url, path, user, password, result);
		}
		else
		{
			status = listRemoteElementsWebDAV(url, path, user, password, result);
		}

		args.ObjectList = result;
	}		
	args.Status = status;
    return PIPELET_NEXT;
}

function listRemoteElementsSFTP( url : String, remotePath : String, user : String, password : String, result : Object ) : Status {


    // for SFTP remoteLogin and remotePassword are required
    if ( empty( user ) ) {
    	return new Status( Status.ERROR, 'ListRemoteFolder: Parameter user empty (required for SFTP)' );
    }

    if ( empty( password ) ){
    	return new Status( Status.ERROR, 'ListRemoteFolder: Parameter password empty (required for SFTP)' );
    }

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( url );

	if ( params == null || params.length < 3 ) {
    	return new Status( Status.ERROR, 'ListRemoteFolder: Parameter RemoteFolderURL not recognized, RemoteFolderURL: ' + url );
	}

	var host : String = params[1];
	var port : Number = null;
	// params[2] is undefined if there was no port provided
	if ( params[2] != undefined )
	{
		port = new Number( params[2] );
	}
	var path : String = remotePath ? remotePath : '.';
	
	// connect
	var sftpClient : SFTPClient = new SFTPClient();
	var connected : boolean;
	
	try
	{
		if ( port != null ) {
			connected = sftpClient.connect( host, port, user, password );
		} else {
			// use default port
			connected = sftpClient.connect( host, user, password );
		}
	} catch ( ex ) {
    	return new Status( Status.ERROR, 'ListRemoteFolder: Error while connecting to ' + host + ( ( port != null ) ? ( ':' + port ) : '' ) + ': ' + ex );
	}

	if ( !connected ) {
    	return new Status( Status.ERROR, 'ListRemoteFolder: Error while connecting to ' + host + ( ( port != null ) ? ( ':' + port ) : '' ) + ': ' + sftpClient.errorMessage );
	}
	try{
		var directoryInfo : FileInfo = sftpClient.getFileInfo(path);
		if ( empty(directoryInfo) ) {
			return new Status( Status.ERROR, 'Directory is cannot be accessed!' );
		} else if( !directoryInfo.directory ) {
			return new Status( Status.ERROR, 'It is not a directory!' );
		} 
		var fileInfos : Array = sftpClient.list(path);
		if ( !empty(fileInfos) ) {
			for each ( var fileInfo : SFTPFileInfo in fileInfos) {
				if ( fileInfo.name == '.' ) {
					continue;
				}
				var fileInfoSO : Object = {};
				fileInfoSO.name = fileInfo.name;
				fileInfoSO.size = fileInfo.size;
				fileInfoSO.lastModified = StringUtils.formatDate(fileInfo.modificationTime, 'dd.MM.yyyy HH:mm:ss');
				fileInfoSO.path = directoryInfo.name;
				if (fileInfo.directory) {
					result.directories.push(fileInfoSO);
				} else {
					result.files.push(fileInfoSO);
				}
			}
		} 
		result.directories.sort(sortFilesByName);
		result.files.sort(sortFilesByName);
		return new Status( Status.OK, 'OK');
	} catch ( e ) {
		var exception = e;
		return new Status( Status.ERROR, e.message);
	} finally {
		if ( sftpClient.connected ) {
			sftpClient.disconnect();
		}
	}

	return;
}

function listRemoteElementsFTP( url : String, remotePath : String, user : String, password : String, result : Object ) : Status {


    // for FTP remoteLogin and remotePassword are required
    if ( empty( user ) ) {
    	return new Status( Status.ERROR, 'ListRemoteFolder: Parameter user empty (required for FTP)' );
    }

    if ( empty( password ) ){
    	return new Status( Status.ERROR, 'ListRemoteFolder: Parameter password empty (required for FTP)' );
    }

    // parse URL, e.g. "ftp://ftp.myserver.com:22/folder/"
	var params : Array = /^ftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( url );

	if ( params == null || params.length < 3 ) {
    	return new Status( Status.ERROR, 'ListRemoteFolder: Parameter RemoteFolderURL not recognized, RemoteFolderURL: ' + url );
	}

	var host : String = params[1];
	var port : Number = null;
	// params[2] is undefined if there was no port provided
	if ( params[2] != undefined )
	{
		port = new Number( params[2] );
	}
	var path : String = remotePath ? remotePath : '.';
	
	// connect
	var ftpClient : FTPClient = new FTPClient();
	var connected : boolean;
	
	try
	{
		if ( port != null ) {
			connected = ftpClient.connect( host, port, user, password );
		} else {
			// use default port
			connected = ftpClient.connect( host, user, password );
		}
	} catch ( ex ) {
		Logger.error( 'ListRemoteFolder: Error while connecting to ' + host + ( ( port != null ) ? ( ':' + port ) : '' ) + ': ' + ex );
    	return new Status( Status.ERROR, 'ListRemoteFolder: Error while connecting to ' + host + ( ( port != null ) ? ( ':' + port ) : '' ) + ': ' + ex );
	}

	if ( !connected ) {
		Logger.error( 'ListRemoteFolder: Error while connecting to ' + host + ( ( port != null ) ? ( ':' + port ) : '' ) + ': ' + ftpClient.replyMessage );
    	return new Status( Status.ERROR, 'ListRemoteFolder: Error while connecting to ' + host + ( ( port != null ) ? ( ':' + port ) : '' ) + ': ' + ( ftpClient.replyMessage ? ftpClient.replyMessage : ' timeout(??).' ) );
	}
	
	try{
		//return new Status( Status.ERROR, 'Please align FTP with SFTP functionality --> allow for relative paths!!');
		var fileInfos : Array = ftpClient.list(path);
		if ( ftpClient.replyCode != 200 && ftpClient.replyCode != 226 ) {
			return new Status( Status.ERROR, ftpClient.replyMessage);
		}
		var fileInfoSO : Object = {};
		fileInfoSO.name = '..';
		fileInfoSO.size = '0';
		fileInfoSO.path = path;
		fileInfoSO.lastModified = StringUtils.formatCalendar(Site.calendar, 'yyyy.MM.dd G HH:mm:ss z');
		result.directories.push(fileInfoSO);
		if ( !empty(fileInfos) ) {
			for each ( var fileInfo : FTPFileInfo in fileInfos) {
				if ( fileInfo.name == '.' ) {
					continue;
				}
				fileInfoSO = {};
				fileInfoSO.name = fileInfo.name;
				fileInfoSO.size = fileInfo.size;
				fileInfoSO.path = path;
				fileInfoSO.lastModified = StringUtils.formatDate(fileInfo.timestamp, 'yyyy.MM.dd G HH:mm:ss z');
				if (fileInfo.directory) {
					result.directories.push(fileInfoSO);
				} else {
					result.files.push(fileInfoSO);
				}
			}
		} 
		result.directories.sort(sortFilesByName);
		result.files.sort(sortFilesByName);
		return new Status( Status.OK, 'OK');
	} catch ( e ) {
		var exception = e;
		Logger.error( 'ListRemoteFolder: ' + e.message );
		return new Status( Status.ERROR, e.message);
	} finally {
		if ( ftpClient.connected ) {
			ftpClient.disconnect();
		}
	}
	return;
}

function listRemoteElementsWebDAV( url : String, path : String, user : String, password : String, result : Object ) : Collection
{
	var webDAVClient : WebDAVClient;
	var remoteFolderURL : String =  (url + ( path ? path : '/' )).replace(/\s/g, '%20');
	
	if ( !empty( user ) && !empty( password ) ) {
		// use authentication
		webDAVClient = new WebDAVClient( remoteFolderURL, user, password );
	} else {
		// no authentication
		webDAVClient = new WebDAVClient( remoteFolderURL );
	}

	var files : Array;
	
	try {
		// remoteFolderURL already contains full reference to folder, no path to append, we pass ""
		// The default depth of 1 makes propfind return the current folder AND files in that folder.
		files = webDAVClient.propfind( "" );
	} catch ( ex ) {
		var exception = ex;
		Logger.error( "DownloadFeed: Error while listing " + remoteFolderURL + ": " + ex );		
    	return new Status( Status.ERROR, "DownloadFeed: Error while listing " + remoteFolderURL + ": " + ex );
	}
	
	if ( !webDAVClient.succeeded() ) {
		Logger.error( "DownloadFeed: Error while listing " + remoteFolderURL + ": " +
			webDAVClient.statusCode + " " + webDAVClient.statusText );		
    	return new Status( Status.ERROR, "DownloadFeed: Error while listing " + remoteFolderURL + ": " +
			webDAVClient.statusCode + " " + webDAVClient.statusText );
	}

	webDAVClient.close();
	var smallPath : String = path ? path.replace(/\//g, '') : '/';
	for each ( var fileInfo : WebDAVFileInfo in files ) {
		if ( !fileInfo.name || fileInfo.name == '.' ) {
			continue;
		}
		let fileInfoSO = {};
		var smallInfoPath : String = fileInfo.path.replace(/\//g, ''); 
		if ( smallInfoPath == smallPath ) {
			fileInfoSO.name = '..';
		} else {
			fileInfoSO.name = fileInfo.name;
		}
		fileInfoSO.size = fileInfo.size;
		fileInfoSO.path = fileInfo.path;
		fileInfoSO.lastModified = StringUtils.formatDate(fileInfo.lastModified(), 'yyyy.MM.dd G HH:mm:ss z');
		if (fileInfo.directory) {
			result.directories.push(fileInfoSO);
		} else {
			result.files.push(fileInfoSO);
		}
	}
	
	return;
}


function sortFilesByName( fileInfo1 : Object, fileInfo2 : Object) : Number {
	if ( fileInfo1.name && fileInfo2.name ) {
		if ( fileInfo1.name > fileInfo2.name ) {
			return 1
		} else if ( fileInfo1.name < fileInfo2.name ) {
			return -1;
		} else {
			return 0;
		}
	}
}