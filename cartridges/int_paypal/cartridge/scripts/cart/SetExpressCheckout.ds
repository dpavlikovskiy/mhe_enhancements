/**********************************************************************************************************************************************************************************************
*
* TITLE:  
*
*	Set Express Checkout
*
* DESCRIPTION:
*
*	Removes PayPal payment intrsument
*
* INPUT PARAMETERS:
*
* 	@input Basket : dw.order.LineItemCtnr The current Basket (which the order is created from)
* 	@input PaymentProcessor : dw.order.PaymentProcessor The needed payment processor.
* 	@input ReturnURL : dw.web.URL Return URL for PayPal
* 	@input CancelURL : dw.web.URL Cancel URL for PayPal
* 	@input RedirectURL : String, redirect url to PayPal
*	@input PaypalOrigination : String Field to denote where the Paypal processing was originated.
* 	@input Locale : String Locale of the website CurrentRequest.httpLocale
* 	@input GetBillingAddrFromPP : Boolean Flag to get Billing address from PayPal
* 	@input PaymentAction : String PayPal payment action (Sale, Order)
* 	@input UserAgent : String httpUserAgent
* 	@input ReferenceTransRequired : Boolean
*	@input isBML : Boolean , checks to see if the button depressed is BML
*
* OUTPUT PARAMETERS
*
* 	@output Location : String The redirect location
* 	@output PaypalToken : String The returned token from Paypal
* 	@output Response : Object The Response
* 	@output Error : Object The Error object
* 	@output PaypalError : String If a Paypal call fails or doesn't return Success
* 	@output AvailFuncs  : dw.util.ArrayList
* 	@output StatusMessage : String
*
**********************************************************************************************************************************************************************************************/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );
importPackage( dw.rpc );

importScript("int_paypal:cart/Credentials.ds");
importScript("int_paypal:cart/WsUtil.ds");

function execute( pdict : PipelineDictionary ) : Number
{

	var basket = pdict.Basket;
	var paymentProcessor : PaymentProcessor  = pdict.PaymentProcessor;

	if( basket == null )
	{
		Logger.error("Please provide a Basket!");
		pdict.PaypalError = "[SetExpressCheckout.ds : Error] - Basket is Null."
		return PIPELET_ERROR;
	}

	try
	{
		var paypalExpress : WebReference = webreferences.PayPalSvcDev;
		
		if (dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) 
		{
			paypalExpress = webreferences.PayPalSvc;
		}
		
		var ppxService : Stub = paypalExpress.getService("PayPalAPIInterfaceService", "PayPalAPIAA");
		
		pdict.AvailFuncs = getAvailableFunctions(ppxService);
		
		// security header
		SetCredentials( paymentProcessor, ppxService );
		
		var paymentDetails = new paypalExpress.PaymentDetailsType();
		var currencyID = paypalExpress.CurrencyCodeType.fromString( basket.getCurrencyCode() );

		// SetExpressCheckout
		var paypalRequest = new paypalExpress.SetExpressCheckoutRequestType();
		paypalRequest.setVersion( "104.0" );
		var details = new paypalExpress.SetExpressCheckoutRequestDetailsType();

		//Bill Me Later (BML) enhancement
		var isBML = pdict.isBML;
		
		if(isBML != null && isBML == true)
		{
			details.setSolutionType(paypalExpress.SolutionTypeType.Sole);
			details.setLandingPage(paypalExpress.LandingPageType.Billing);	
			
			var fundingSourceDetails = new paypalExpress.FundingSourceDetailsType();	
			fundingSourceDetails.setUserSelectedFundingSource(paypalExpress.UserSelectedFundingSourceType.BML);
			details.setFundingSourceDetails(fundingSourceDetails);
		}

		// ReturnURL - The URL to which PayPal sends your customer after they log in to PayPal and select a payment method and shipping address. 
		details.returnURL = pdict.ReturnURL; //dw.web.URLUtils.httpsContinue();
		
		// CancelURL - The URL to which PayPal redirects your customer if the customer is unable to pay or decides not to use PayPal.
		// PayPal recommends that this value be the original page on which the customer chose to use PayPal. 
		details.cancelURL = pdict.CancelURL; //dw.web.URLUtils.http( 'Cart-Show' );
		
		//Set locale for PayPal login page (possible values: AU, DE, FR, IT, GB, ES, US
		details.localeCode = pdict.Locale; //"GB"; 

		//Payment Action Authorization/Sale/Order
		details.setPaymentAction(paypalExpress.PaymentActionCodeType.Authorization);
		
		if (pdict.PaymentAction != null && pdict.PaymentAction == "Order") 
		{
			details.setPaymentAction(paypalExpress.PaymentActionCodeType.Order);
		} 
		else if (pdict.PaymentAction != null && pdict.PaymentAction == "Sale") 
		{
			details.setPaymentAction(paypalExpress.PaymentActionCodeType.Sale);
		}

		//set merchant logo and colors for PayPal website
		details.setCppHeaderImage(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppHeaderImage'));
		details.setCppHeaderBorderColor(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppHeaderborderColor'));
		details.setCppHeaderBackColor(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppHeaderbackColor'));
		details.setCppPayflowColor(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalCppPayflowColor'));
		
		//setting option for getting billing address from PayPal
		if (pdict.GetBillingAddrFromPP)
		{
			details.reqBillingAddress = "1";			
		}

		// Send Shipping Address override if process originated from Payment page 
		if (pdict.PaypalOrigination == "PaymentPage") 
		{
			details.addressOverride = "1";
			var shippingAddress : OrderAddress = basket.defaultShipment.shippingAddress;
			
			if (shippingAddress == null) 
			{
				var shippingAddressCollection : Collection = basket.shipments;
				
				for( var i = 0; i < shippingAddressCollection.size(); i++ ) 
				{
					shippingAddress = shippingAddressCollection[i].shippingAddress;
				}
			}			
			
			var paypalShippingAddress = new paypalExpress.AddressType();
			
			paypalShippingAddress.setName(shippingAddress.fullName);
			paypalShippingAddress.setStreet1( shippingAddress.getAddress1() );
			paypalShippingAddress.setStreet2( shippingAddress.getAddress2() );
			paypalShippingAddress.setCityName( shippingAddress.getCity() );
			paypalShippingAddress.setStateOrProvince( shippingAddress.getStateCode() );
			
			if (shippingAddress.getCountryCode() != null && shippingAddress.getCountryCode().toString().length>0) 
			{
				paypalShippingAddress.setCountry(paypalExpress.CountryCodeType.fromString( shippingAddress.getCountryCode() ));
			} 
			else 
			{
				//set default country code as US.
				paypalShippingAddress.setCountry(paypalExpress.CountryCodeType.US);
			}
			
			paypalShippingAddress.setPostalCode( shippingAddress.getPostalCode() );
			paypalShippingAddress.setPhone( shippingAddress.phone);

			details.setAddress(paypalShippingAddress);
		}
		
		if(!empty(pdict.ReferenceTransRequired) && pdict.ReferenceTransRequired &&('PayPalIncludeRefTran' in dw.system.Site.current.preferences.custom && dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalIncludeRefTran')))
		{
			var paypalBillingADs = new paypalExpress.BillingAgreementDetailsType();	
			paypalBillingADs.billingType = paypalExpress.BillingCodeType.MerchantInitiatedBilling;
			paypalBillingADs.setBillingAgreementDescription(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalRefTranDescriptionName'));
			
			var arrayAD : Array = new Array();
			arrayAD.push( paypalBillingADs );
			details.billingAgreementDetails =arrayAD;		           
		}
		
        // Sets the purchased items for this PaymentDetailsType.
        var items : Collection = basket.getAllProductLineItems();
        var itemType;
        var item : ProductLineItem;
        var arrayItems : Array = new Array();

        for( var i = 0; i < items.size(); i++ ) 
        {
        	item = items[i];
        	itemType = new paypalExpress.PaymentDetailsItemType();

			// Sets the name value for this PaymentDetailsItemType.
        	itemType.setName( item.getProductName() );
			// Sets the number value for this PaymentDetailsItemType.
			itemType.setNumber( item.getProductID() );
 			// Sets the quantity value for this PaymentDetailsItemType.
			itemType.setQuantity( item.quantity.value );
			amount = new paypalExpress.BasicAmountType( item.basePrice );
        	amount.currencyID = currencyID;
   	    	itemType.setAmount( amount );
 
 			arrayItems.push( itemType );

			var adjustments : Collection = item.getPriceAdjustments();
			var adjust : PriceAdjustment = null;
			var lineItem : LineItem = null
			
			for each( adjust in adjustments ) 
			{
				itemType = new paypalExpress.PaymentDetailsItemType();
				itemType.setName( adjust.promotion == null ? "PriceAdjustment" : adjust.promotion.name );
				itemType.setQuantity( 1 );
				amount = new paypalExpress.BasicAmountType( adjust.grossPrice );
				amount.currencyID = currencyID;
				itemType.setAmount( amount );
				arrayItems.push( itemType );
			}
 		}

		// Basket Price adjustments
		var basketAdjustments : Collection = basket.getPriceAdjustments();
		var basketAdjust : PriceAdjustment = null;
		
		for each( basketAdjust in basketAdjustments ) 
		{
 			if (basketAdjust.price.value != null) 
 			{
				itemType = new paypalExpress.PaymentDetailsItemType();
				itemType.setName("Basket Discount");
				itemType.setQuantity( 1 );
				amount = new paypalExpress.BasicAmountType( basketAdjust.grossPrice );
				amount.currencyID = currencyID;
				itemType.setAmount( amount );
				arrayItems.push( itemType );
 			}
		}

		//set item srray in payment details
 		paymentDetails.setPaymentDetailsItem(arrayItems);
 		
 		//Set PayPal totals based on PayPal origination
 		if (pdict.PaypalOrigination == "PaymentPage") 
 		{	
			// Sets the Tax value for this PaymentDetailsType.
			//amount = new paypalExpress.BasicAmountType( basket.getAdjustedShippingTotalNetPrice().add(basket.getAdjustedShippingTotalTax()) );
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedShippingTotalNetPrice().add(basket.getAdjustedShippingTotalTax()) );
			
			amount.currencyID = currencyID; 
	 		paymentDetails.setShippingTotal( amount );
	
			// Sets the Tax value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getTotalTax());
			amount.currencyID = currencyID; 
	 		//paymentDetails.setTaxTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedMerchandizeTotalPrice(true).getValue() );
	 		paymentDetails.setItemTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getTotalGrossPrice().getValue() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setOrderTotal( amount );
 		
 		} 
 		else 
 		{		
			// Sets the Tax value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedShippingTotalNetPrice() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setShippingTotal( amount );
	
			// Sets the Tax value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getTotalTax() ); //getTotalTax()
			amount.currencyID = currencyID; 
	 		paymentDetails.setTaxTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			amount = new paypalExpress.BasicAmountType( basket.getAdjustedMerchandizeTotalNetPrice().getValue() );
			amount.currencyID = currencyID; 
	 		paymentDetails.setItemTotal( amount );
	
			// Sets the itemTotal value for this PaymentDetailsType.
			if(basket.getTotalGrossPrice() != 0)
			{
				amount = new paypalExpress.BasicAmountType( basket.getTotalGrossPrice().getValue() ); //getTotalGrossPrice() getAdjustedMerchandizeTotalPrice() getAdjustedMerchandizeTotalGrossPrice()
			}
			else
			{
				amount = new paypalExpress.BasicAmountType( basket.getAdjustedMerchandizeTotalPrice().getValue() ); //getTotalGrossPrice() getAdjustedMerchandizeTotalPrice() getAdjustedMerchandizeTotalGrossPrice()
			}
			
			amount.currencyID = currencyID;
	 		paymentDetails.setOrderTotal( amount );
 		}

		var arrayDetails : Array = new Array();
		arrayDetails.push(paymentDetails);
		
		//set payment details which has item details
		details.setPaymentDetails(arrayDetails);

		//set details in request
		paypalRequest.setSetExpressCheckoutRequestDetails( details );
		var req = new paypalExpress.SetExpressCheckoutReq();
		req.setSetExpressCheckoutRequest( paypalRequest );

		var response = ppxService.setExpressCheckout( req );
		
		Logger.error('Ack: ' + response.getAck().toString());
		Logger.error('Token: ' + response.token);
		Logger.error('Correlation ID: ' + response.correlationID);  

		if( response.getAck() != null && response.getAck().equals(paypalExpress.AckCodeType.Success) ) 
		{
			var mytoken : String = response.token;
			pdict.PaypalToken = mytoken;
			
			var appendMobile =false;
			
			if (!empty(pdict.UserAgent) && pdict.UserAgent.toLocaleLowerCase().indexOf('mobile')>-1)
			{
				appendMobile = true;
			}
			
			var redirectURL = pdict.RedirectURL.toString();
			
			if (appendMobile)
			{
				redirectURL = redirectURL.replace('_express-checkout','_express-checkout-mobile');
				if (!empty(dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalMobilTransactionCommit')) && dw.system.Site.getCurrent().getCustomPreferenceValue('PayPalMobilTransactionCommit'))
				{
					redirectURL = redirectURL+"&useraction=commit";
				}
			}
			pdict.Location = redirectURL + mytoken;

		} 
		else
		{
			Logger.error('Ack  -- ' + response.getAck().toString() );
			Logger.error('Error Message Short Message  -- ' + response.getErrors()[0].getShortMessage() );
			Logger.error('Error Message Long Message  -- ' + response.getErrors()[0].getLongMessage() );
			Logger.error('Error Message ErrorCode  -- ' + response.getErrors()[0].getErrorCode() );
			pdict.PaypalError = "[SetExpressCheckout.ds : Error] - " + response.getErrors()[0].getLongMessage() + " (" + response.getErrors()[0].getErrorCode() + ")" + "-(" + response.correlationID + ")";

			return PIPELET_ERROR;
		}
	}
	catch(e)
	{
		var error = e;
		if(e instanceof Fault)
		{
			Logger.error("Actor " + e.faultActor+" caused fault '"+e.faultCode +"' ("+e.faultString+" - "+e.faultDetail+")");
		}
		else
		{
			Logger.error(e.toString());
		}
		pdict.Error = e;
		pdict.PaypalError = "[SetExpressCheckout.ds : Error] - " + e.message;
		return PIPELET_ERROR;
	}
	return PIPELET_NEXT;
}