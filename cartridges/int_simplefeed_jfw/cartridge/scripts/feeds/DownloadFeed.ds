/**
 * Connect to a WebDAV or SFTP server, check for matching files and download the file (just one
 * file) that comes alphabetically first. To retieve the next matching file the pipelet needs to be
 * called again. If there are no more matching files the pipelet uses the ERROR exit.
 *
 * The pipelet also uses the ERROR exit if a technical error occured. Check output value
 * TechnicalError to distinguish the error causes.
 *
 * If TempFolder does not exist, it is created.
 * @input LastProcessedTimestamp : String Last sucessful Processed file Timestamp of feed file from Job Configuration
 * @input RemoteFolderURL : String  mandatory, URL to WebDAV or SFTP folder, e.g. "https://www.myserver.com/folder/", "sftp://sftp.myserver.com:22/folder/"
 * @input RemoteLogin : String  optional, login for WebDAV Basic Authentication or Digest Autentication or SFTP
 * @input RemotePassword : String  optional, password for WebDAV Basic Authentication or Digest Autentication or SFTP
 * @input RemoteFilePattern : String  mandatory, a regular expression, e.g. "Catalog_.*\.xml", matching files are imported in alphabetrical order
 * @input TempFolder : String  mandatory, e.g. "catalog", folder is underneath Impex share, src folder
 * @input FileListBased : Boolean Defines if the download should be based on a file list, if set to true, the provided list of files is used. If it doesn't exist, the list will be created.
 * @input InboundFileList : dw.util.Collection List of files that should be downloaded
 * @input ReplayDisabled : Boolean  "TRUE" chaeck for replay file based on file name, "FALSE" do not check for replay file.
 *
 * If pipelet finishes with PIPELET_NEXT:
 * @output RemoteFile : String  Name of the remote file inside RemoteFolderURL that has been downloaded
 * @output File : String  Name of the local file relative to the Impex share, src folder
 * @output OutboundFileList : dw.util.Collection List of files that should be downloaded
 *
 * If pipelet finishes with PIPELET_ERROR:
 * @output TechnicalError : String  "TRUE" technical error occured, "FALSE" there are no more matching files
 * @output ReplayFile : String  "TRUE" raise alert , "FALSE" next node of pipeline.
 */
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.system );
importPackage( dw.util );
importScript('bc_jobframework:job/JobMonitor.ds');
var cvLogger : Logger = getCurrentJobLogger();

var lastProcessedTimestamp : String = null;
var replayStatus: Boolean= false;
var replayCheck: Boolean= false;
var connetcionFail: Boolean= false;

function execute( args : PipelineDictionary ) : Number
{
	// indicate technical error as default, in case we error during processing
	args.TechnicalError = "TRUE";
	// indicate Replay File , based on processing file timestamp
	args.ReplayFile = "FALSE";
	
	
	// read parameters
	lastProcessedTimestamp = args.LastProcessedTimestamp;
	var remoteFolderURL : String = args.RemoteFolderURL;
 	var remoteLogin : String = args.RemoteLogin;
 	var remotePassword : String = args.RemotePassword;
    var remoteFilePattern : String = args.RemoteFilePattern;
    var tempFolder : String = args.TempFolder;
    replayCheck= args.ReplayDisabled;
   
	//using fileList based downloads makes sense if the downloaded files must not be deleted 
	//afterwards or the number of remote files is big. Please use this option with care as the 
	//number of collection entries may occupy to much resources
    var fileListBased : Boolean = true;
    var remoteFiles : SortedSet = args.InboundFileList;

    // check parameters
    if ( empty( remoteFolderURL ) )
    {
    	cvLogger.error( "DownloadFeed: Parameter RemoteFolderURL empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( remoteFilePattern ) )
    {
    	cvLogger.error( "DownloadFeed: Parameter RemoteFilePattern empty" );
    	return PIPELET_ERROR;
    }

    if ( empty( tempFolder ) )
    {
    	cvLogger.error( "DownloadFeed: Parameter TempFolder empty" );
    	return PIPELET_ERROR;
    }

	if ( !fileListBased || remoteFiles == null ) {
	
	    cvLogger.debug( "DownloadFeed: " +
	    	"RemoteFolderURL: " + remoteFolderURL + ", " +
	    	"RemoteLogin: " + ( !empty( remoteLogin ) ? remoteLogin : "(empty)" ) + ", " +
	    	"RemotePassword: " + ( !empty( remotePassword ) ? "(provided)" : "(empty)" ) + ", " +
	    	"RemoteFilePattern: " + remoteFilePattern + ", " +
	    	"TempFolder: " + tempFolder );
		
		remoteFiles = new SortedSet();
		var remoteFileRE : RegExp = new RegExp( remoteFilePattern );
		var remoteFilesFilter = function(candidate) {
			if ( remoteFileRE.test( candidate ) )
			{
				cvLogger.debug( "DownloadFeed: Matching file: {0}", candidate );
				if ( remoteFiles.size() < 20000 ) {
					remoteFiles.add( candidate );
				}
			}
		};

	    // get list of all files in folder
	     listRemoteFiles( remoteFolderURL, remoteLogin, remotePassword, remoteFilesFilter );
		if (connetcionFail) {
			// there was a technical problem
			args.TechnicalError = "CONNECTIONFAIL";
			return PIPELET_ERROR;
		}
		if ( remoteFiles == null ) {
			// there was a technical problem
			return PIPELET_ERROR;
		}
	} else {
		//do nothing and simply use the remoteFile list as it is
	}	
	if ( remoteFiles.empty )
	{
		// no more files to process
		args.TechnicalError = "FALSE";
		return PIPELET_ERROR;
	}

	// pick the first file from the collection
	var remoteFile : String = remoteFiles[0];
	
	cvLogger.debug( "DownloadFeed: Downloading " + remoteFile );

	if ( !createTempFolder( tempFolder ) )
	{
		// couldn't create folder
		return PIPELET_ERROR;
	}

	var file : String = tempFolder + File.SEPARATOR + remoteFile;
	
	if ( !downloadFile( remoteFolderURL, remoteLogin, remotePassword, remoteFile, file ) )
	{
		if(replayStatus){
			args.ReplayFile = "TRUE";
			args.RemoteFile = remoteFile;
		}
	   return PIPELET_ERROR;
		 
	}

	args.RemoteFile = remoteFile;
	args.File = file;
	
	if ( fileListBased ) {
		remoteFiles.remove(remoteFile);
		args.OutboundFileList = remoteFiles;
	}
	
	// download was successful
	args.TechnicalError = "FALSE";

    return PIPELET_NEXT;
}

function listRemoteFiles( remoteFolderURL : String, remoteLogin : String, remotePassword : String, callback: Function  ) : Collection
{
	if ( remoteFolderURL.indexOf( "sftp://" ) == 0 )
	{
		return listRemoteFilesSFTP( remoteFolderURL, remoteLogin, remotePassword, callback );
	} 
 
   /*else if ( remoteFolderURL.indexOf( "ftp://" ) == 0 ) 
	{
		return listRemoteFilesFTP( remoteFolderURL, remoteLogin, remotePassword, callback );
	}
	else
	{
		return listRemoteFilesWebDAV( remoteFolderURL, remoteLogin, remotePassword, callback );
	}*/
	
}

/*
function listRemoteFilesWebDAV( remoteFolderURL : String, remoteLogin : String, remotePassword : String, callback: Function  ) : Collection
{
	var webDAVClient : WebDAVClient;
	
	if ( !empty( remoteLogin ) && !empty( remotePassword ) )
	{
		// use authentication
		webDAVClient = new WebDAVClient( remoteFolderURL, remoteLogin, remotePassword );
	}
	else
	{
		// no authentication
		webDAVClient = new WebDAVClient( remoteFolderURL );
	}

	var files : Array;
	
	try
	{
		// remoteFolderURL already contains full reference to folder, no path to append, we pass ""
		// The default depth of 1 makes propfind return the current folder AND files in that folder.
		files = webDAVClient.propfind( "" );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + remoteFolderURL + ": " + ex );		
		return null;
	}
	
	if ( !webDAVClient.succeeded() )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + remoteFolderURL + ": " +
			webDAVClient.statusCode + " " + webDAVClient.statusText );		
		return null;
	}

	webDAVClient.close();

	for each ( var file : WebDAVFileInfo in files )
	{
		// filter out directories; this will automatically remove the current folder from the list
		if ( !file.directory )
		{
			cvLogger.debug( "DownloadFeed: Listing file: " + file.name );
			callback( file.name );
		}		
	}
	
	return;
}*/
/*
function listRemoteFilesFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String, callback: Function ) : Collection
{
	// connect to server
	var ftpClient : FTPClient = connectFTP( remoteFolderURL, remoteLogin, remotePassword );
	
	if ( ftpClient == null )
	{
		return null;
	}

    // parse URL, e.g. "sftp://ftp.myserver.com:22/folder/"
	var params : Array = /^ftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	cvLogger.error( "DownloadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return null;
	}

	var path : String = params[3];	

	// list files
	var files : Array;
	
	try
	{
		files = ftpClient.list( path );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + path + ": " + ex );		
		return null;
	}
	
	if ( files == null )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + path + ": " + ftpClient.replyMessage );		
		return null;
	}

	ftpClient.disconnect();

	for each ( var file : FTPFileInfo in files )
	{
		// filter out directories
		if ( !file.directory )
		{
			cvLogger.debug( "DownloadFeed: Listing file: " + file.name );
			callback( file.name );
		}		
	}
	return;
}
*/
function listRemoteFilesSFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String, callback: Function ) : Collection
{
	// connect to server
	var sftpClient : SFTPClient = connectSFTP( remoteFolderURL, remoteLogin, remotePassword );
	
	if ( sftpClient == null )
	{
		connetcionFail=true;
		return null;
	}

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	cvLogger.error( "DownloadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return null;
	}

	var path : String = params[3];	

	// list files
	var files : Array;
	
	try
	{
		files = sftpClient.list( path );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + path + ": " + ex );		
		return null;
	}
	
	if ( files == null )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + path + ": " + sftpClient.errorMessage );		
		return null;
	}

	sftpClient.disconnect();

	for each ( var file : SFTPFileInfo in files )
	{
		// filter out directories
		if ( !file.directory )
		{
			cvLogger.debug( "DownloadFeed: Listing file: " + file.name );
			callback( file.name );
		}		
	}
	
	return;
}

function createTempFolder( tempFolder : String ) : boolean
{
	var folder : File = new File( File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + tempFolder );

	if ( folder.exists() )
	{
		// nothing to do
		return true;
	}

	cvLogger.debug( "DownloadFeed: Creating temp folder " + folder.fullPath );

	// create folder	
	var result : boolean = folder.mkdirs();
	if ( !result )
	{
		cvLogger.error( "DownloadFeed: Error creating temp folder " + folder.fullPath );
		return false;
	}
	
	return true;
}

function downloadFile( remoteFolderURL : String, remoteLogin : String, remotePassword : String, remoteFile : String, file : String ) : boolean
{
	if ( remoteFolderURL.indexOf( "sftp://" ) == 0 )
	{
		return downloadFileSFTP( remoteFolderURL, remoteLogin, remotePassword, remoteFile, file );
	}
/*	else if ( remoteFolderURL.indexOf( "ftp://" ) == 0 ) 
	{
		return downloadFileFTP( remoteFolderURL, remoteLogin, remotePassword, remoteFile, file );
	}
	else
	{
		return downloadFileWebDAV( remoteFolderURL, remoteLogin, remotePassword, remoteFile, file );
	}
*/
}

/*
function downloadFileWebDAV( remoteFolderURL : String, remoteLogin : String, remotePassword : String, remoteFile : String, file : String ) : boolean
{
	var webDAVClient : WebDAVClient;
	
	if ( !empty( remoteLogin ) && !empty( remotePassword ) )
	{
		// use authentication
		webDAVClient = new WebDAVClient( remoteFolderURL, remoteLogin, remotePassword );
	}
	else
	{
		// no authentication
		webDAVClient = new WebDAVClient( remoteFolderURL );
	}

	var files : Array;
	
	// figure size of remote file
	try
	{
		files = webDAVClient.propfind( remoteFile );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + remoteFolderURL + remoteFile + ": " + ex );		
		return false;
	}

	if ( !webDAVClient.succeeded() )
	{
		cvLogger.error( "DownloadFeed: Error while listing " + remoteFolderURL + remoteFile + ": " +
			webDAVClient.statusCode + " " + webDAVClient.statusText );		
		return false;
	}

	if ( files.length != 1 )
	{
		cvLogger.error( "DownloadFeed: Unexpected number of elements when listing " + remoteFolderURL + remoteFile + ": " + files.length );		
		webDAVClient.close();
		return false;
	}

	var fileSize : Number = files[0].size;

	// file too large?	
	if ( fileSize > WebDAVClient.MAX_GET_FILE_SIZE )
	{
		cvLogger.error( "DownloadFeed: File " + remoteFolderURL + remoteFile + " too large to download: " +
			"file size: " + fileSize + ", MAX_GET_FILE_SIZE: " + WebDAVClient.MAX_GET_FILE_SIZE );		
		webDAVClient.close();
		return false;
	}

	cvLogger.debug( "DownloadFeed: File size: " + fileSize );

	// download file
	var localFile : File = new File( File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + file );

	try
	{
		webDAVClient.getBinary( remoteFile, localFile, WebDAVClient.MAX_GET_FILE_SIZE );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while downloading " + remoteFolderURL + remoteFile + " to " + localFile.fullPath + ": " + ex );		
		return false;
	}
	
	if ( !webDAVClient.succeeded() )
	{
		cvLogger.error( "DownloadFeed: Error while downloading " + remoteFolderURL + remoteFile + " to " + localFile.fullPath + ": " +
			webDAVClient.statusCode + " " + webDAVClient.statusText );		
		return false;
	}

	webDAVClient.close();

	// compare file sizes
	var localFileSize : Number = localFile.length();
	
	if ( fileSize != localFileSize )
	{
		cvLogger.error( "DownloadFeed: Remote and local file sizes differ after download: " +
			"remote: " + fileSize + ", local: " + localFileSize );		
		return false;
	}

	// downloaded successfully
	return true;
}
*/
function downloadFileSFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String, remoteFile : String, file : String ) : boolean
{
	// connect to server
	var sftpClient : SFTPClient = connectSFTP( remoteFolderURL, remoteLogin, remotePassword );
	
	if ( sftpClient == null )
	{
		return false;
	}

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	cvLogger.error( "DownloadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return false;
	}

	var path : String = params[3];	

	// figure size of remote file
	var fileInfo : SFTPFileInfo;
	
	try
	{
		fileInfo = sftpClient.getFileInfo( path + remoteFile );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while retrieving file info " + path + remoteFile + ": " + ex );		
		return false;
	}

	if ( fileInfo == null )
	{
		cvLogger.error( "DownloadFeed: Error while retrieving file info  " + path + remoteFile + ": " +
			sftpClient.errorMessage );		
		return false;
	}

	var fileSize : Number = fileInfo.size;

	// file too large?	
	if ( fileSize > SFTPClient.MAX_GET_FILE_SIZE )
	{
		cvLogger.error( "DownloadFeed: File " + path + remoteFile + " too large to download: " +
			"file size: " + fileSize + ", MAX_GET_FILE_SIZE: " + SFTPClient.MAX_GET_FILE_SIZE );		
		sftpClient.disconnect();
		return false;
	}

	cvLogger.debug( "DownloadFeed: File size: " + fileSize );

    //check for replay 
	    if(replayCheck){
	    	replayStatus = false;
	    } else {
		    replayStatus = isFeedArrivedForReplay(fileInfo.getName());
	    }
	    if(replayStatus){
	    	
	   	  renameReplayFeeds(sftpClient, path + remoteFile);
	   	  sftpClient.disconnect();
	   	  return false;
	   	  
	    }else{
		
			// download file
			var localFile : File = new File( File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + file );
			var result : boolean;
		    
			try
			{
				result = sftpClient.getBinary( path + remoteFile, localFile );
			}
			catch ( ex )
			{
				cvLogger.error( "DownloadFeed: Error while downloading " + path + remoteFile + " to " + localFile.fullPath + ": " + ex );		
				return false;
			}
			
			if ( !result )
			{
				cvLogger.error( "DownloadFeed: Error while downloading " + path + remoteFile + " to " + localFile.fullPath + ": " +
					sftpClient.errorMessage );		
				return false;
			}
		    
			sftpClient.disconnect();
		
			// compare file sizes
			var localFileSize : Number = localFile.length();
			
			if ( fileSize != localFileSize )
			{
				cvLogger.error( "DownloadFeed: Remote and local file sizes differ after download: " +
					"remote: " + fileSize + ", local: " + localFileSize );		
				return false;
			}
	    
    }
	// downloaded successfully
	return true;
  }

  function isFeedArrivedForReplay(feedName : String): boolean {
		
		//Process feed file name and convert into date object. 
		//compare date object 
		var replayStatus:Boolean=false;
		if (empty(lastProcessedTimestamp)) {
			return false;
		} else {
			
			var lastprocessedFileTimestamp:String =lastProcessedTimestamp;
			
			try{
				var filename : String = feedName;
		 		var fileTime : String = null;
				var filenameArray : Array = null;
				if (!empty(filename)) {
					filenameArray = filename.split("_");
					fileTime = filenameArray[filenameArray.length-1].split(".");
				}
				var c : dw.util.Calendar = new dw.util.Calendar();
				    c.parseByFormat(lastprocessedFileTimestamp, "yyyyMMddHHmmss");
				var fileDate:Date = c.getTime();
				  	
				var d : dw.util.Calendar = new dw.util.Calendar();
				    d.parseByFormat(fileTime, "yyyyMMddHHmmss");
			 	var processedfileDate:Date =d.getTime();
			
				if(processedfileDate > fileDate){
					 replayStatus=false;
				}else{
					 replayStatus=true;
				}
				 
			 }catch(ex){
				cvLogger.error( "Error in processing feed file name and converting into date object." );		
			} 
			 
		    return replayStatus;
		}
	}

/*
function downloadFileFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String, remoteFile : String, file : String ) : boolean
{
	// connect to server
	var ftpClient : FTPClient = connectFTP( remoteFolderURL, remoteLogin, remotePassword );
	
	if ( ftpClient == null )
	{
		return false;
	}

    // parse URL, e.g. "ftp://ftp.myserver.com:22/folder/"
	var params : Array = /^ftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	cvLogger.error( "DownloadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return false;
	}

	var path : String = params[3];	

	// figure size of remote file
	var fileInfoArray : Array;
	
	try
	{
		fileInfoArray = ftpClient.list( path + remoteFile );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while retrieving file info " + path + remoteFile + ": " + ex );		
		return false;
	}

	if ( empty( fileInfoArray ) )
	{
		cvLogger.error( "DownloadFeed: Error while retrieving file info  " + path + remoteFile + ": " +
			ftpClient.replyMessage );		
		return false;
	}

	var fileInfo : FTPFileInfo = fileInfoArray[0];

	var fileSize : Number = fileInfo.size;

	// file too large?	
	if ( fileSize > FTPClient.MAX_GET_FILE_SIZE )
	{
		cvLogger.error( "DownloadFeed: File " + path + remoteFile + " too large to download: " +
			"file size: " + fileSize + ", MAX_GET_FILE_SIZE: " + FTPClient.MAX_GET_FILE_SIZE );		
		ftpClient.disconnect();
		return false;
	}

	cvLogger.debug( "DownloadFeed: File size: " + fileSize );

	// download file
	var localFile : File = new File( File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + file );
	var result : boolean;

	try
	{
		result = ftpClient.getBinary( path + remoteFile, localFile );
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while downloading " + path + remoteFile + " to " + localFile.fullPath + ": " + ex );		
		return false;
	}
	
	if ( !result )
	{
		cvLogger.error( "DownloadFeed: Error while downloading " + path + remoteFile + " to " + localFile.fullPath + ": " +
			ftpClient.replyMessage );		
		return false;
	}

	ftpClient.disconnect();

	// compare file sizes
	var localFileSize : Number = localFile.length();
	
	if ( fileSize != localFileSize )
	{
		cvLogger.error( "DownloadFeed: Remote and local file sizes differ after download: " +
			"remote: " + fileSize + ", local: " + localFileSize );		
		return false;
	}

	// downloaded successfully
	return true;
}
*/
function connectSFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String ) : SFTPClient
{
    // for SFTP remoteLogin and remotePassword are required
    if ( empty( remoteLogin ) )
    {
    	cvLogger.error( "DownloadFeed: Parameter RemoteLogin empty (required for SFTP)" );
    	return null;
    }

    if ( empty( remotePassword ) )
    {
    	cvLogger.error( "DownloadFeed: Parameter RemotePassword empty (required for SFTP)" );
    	return null;
    }

    // parse URL, e.g. "sftp://sftp.myserver.com:22/folder/"
	var params : Array = /^sftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	cvLogger.error( "DownloadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return null;
	}

	var host : String = params[1];
	var port : Number = null;
	// params[2] is undefined if there was no port provided
	if ( params[2] != undefined )
	{
		port = new Number( params[2] );
	}
	
	var sftpClient : SFTPClient = new SFTPClient();
	var result : boolean;
	var reattempt:Number;
	reattempt=0;
    do{
    	
		try
		{
			if ( port != null )
			{
				result = sftpClient.connect( host, port, remoteLogin, remotePassword );
			}
			else
			{
				// use default port
			  result = sftpClient.connect( host, remoteLogin, remotePassword );
			}
			
		if(result){
			break;
		}else{
			reattempt=reattempt+1;
			
		}
		
		}
		catch ( ex )
		{
	        reattempt=reattempt+1;
			cvLogger.error( "DownloadFeed: Error while connecting to " +
				host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + ex );		
			return null;
		}

    }while(reattempt<=1 );

	if ( !result )
	{
		cvLogger.error( "DownloadFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + sftpClient.errorMessage );		
		return null;
	}

	return sftpClient;
}

function connectFTP( remoteFolderURL : String, remoteLogin : String, remotePassword : String ) : FTPClient
{
    // for FTP remoteLogin and remotePassword are required
    if ( empty( remoteLogin ) )
    {
    	cvLogger.error( "DownloadFeed: Parameter RemoteLogin empty (required for FTP)" );
    	return null;
    }

    if ( empty( remotePassword ) )
    {
    	cvLogger.error( "DownloadFeed: Parameter RemotePassword empty (required for FTP)" );
    	return null;
    }

    // parse URL, e.g. "ftp://ftp.myserver.com:22/folder/"
	var params : Array = /^ftp:\/\/([^\/:]+)(?::(\d+))?(\/(?:.*\/)?)$/.exec( remoteFolderURL );

	if ( params == null || params.length != 4 )
	{
    	cvLogger.error( "DownloadFeed: Parameter RemoteFolderURL not recognized, RemoteFolderURL: " + remoteFolderURL );
    	return null;
	}

	var host : String = params[1];
	var port : Number = null;
	// params[2] is undefined if there was no port provided
	if ( params[2] != undefined )
	{
		port = new Number( params[2] );
	}
	
	var ftpClient : FTPClient = new FTPClient();
	var result : boolean;
	
	try
	{
		if ( port != null )
		{
			result = ftpClient.connect( host, port, remoteLogin, remotePassword );
		}
		else
		{
			// use default port
			result = ftpClient.connect( host, remoteLogin, remotePassword );
		}
	}
	catch ( ex )
	{
		cvLogger.error( "DownloadFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + ex );		
		return null;
	}

	if ( !result )
	{
		cvLogger.error( "DownloadFeed: Error while connecting to " +
			host + ( ( port != null ) ? ( ":" + port ) : "" ) + ": " + ftpClient.replyMessage );		
		return null;
	}

	return ftpClient;
}

function renameReplayFeeds (sftpClient :SFTPClient, feedName : String) : Boolean{
	
	var status:Boolean=false;
	try{
		
	   var index:Number=feedName.indexOf("_");
	   var renameFile=feedName.replace(feedName.substring(index, index+1), "_OLDFILE_");
	  // var renameFile:String=feedName.replace("Inventory", "Inventory_OLDFILE_");
	   status= sftpClient.rename(feedName, renameFile);
	   
	 } catch ( ex ) {
		cvLogger.error( "Error in remane replay feed file "+feedName );		
		return false;
	}
	return status;
}