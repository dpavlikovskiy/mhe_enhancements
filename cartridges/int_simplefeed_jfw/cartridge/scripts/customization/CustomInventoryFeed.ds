/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
* @input inventoryStockLevel : String
* @input TempFolder : String  mandatory, e.g. "inventory", folder is underneath Impex share, src folder
* @input OriginalFile : String  Name of the Original file only
* @output CustomFeedFile : String  Name of the New feed file relative to the Impex share, src folder
* @output StatusMessage : String
 */
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.net );

var technicalError : String= "TRUE";
var pidList : HashMap = null;
var reconcileMap : HashMap = null;
var caseProductMap : HashMap = new HashMap();

var CONST_COL : String = "COL";
var CONST_PCE : String = "PCE";
var CONST_CA : String = "CA";
var INVENTORY : String = "inventory";
var INVENTORY_LIST : String = "inventory-list";
var HEADER : String = "header";
var LIST_ID : String = "list-id";
var PRODUCT_ID : String = "product-id";
var RECORDS : String = "records";
var RECORD : String = "record";
var regExpRecordEnd : RegExp = new RegExp( "</record>" );
var statusmessage:String="";
var inventoryStockLevel:String="physical"; 
function execute( args : PipelineDictionary ) : Number
{
	var customStartDate : Date = new Date(); 
		// indicate technical error as default, in case we error during processing
	// read parameters
	inventoryStockLevel =args.inventoryStockLevel;
	var tempFolder : String = args.TempFolder;
    if ( empty( tempFolder ) )
    {
    	Logger.getLogger("CustomInventoryFeed").error( "CustomInventoryFeed: Parameter TempFolder empty" );
    	return PIPELET_ERROR;
    }
    var originalFile : String = args.OriginalFile;
	 if ( empty( originalFile ) )
    {
    	Logger.getLogger("CustomInventoryFeed").error( "CustomInventoryFeed: Parameter TempFolder empty" );
    	args.StatusMessage="Error Message:CustomInventoryFeed: Parameter originalFile empty";
    	return PIPELET_ERROR;
    }
	
	var customFile : String = createFeedFile(tempFolder, originalFile, args);
    if(technicalError == "TRUE")
    {
    	args.StatusMessage=statusmessage;
    	return PIPELET_ERROR;
    	
    }	

	args.CustomFeedFile = tempFolder + File.SEPARATOR + customFile;
	var customEndDate : Date = new Date(); 
	var timeTaken : Number = customEndDate.getTime()-customStartDate.getTime();
	Logger.getLogger("CustomInventoryFeed").error( "CustomInventoryFeed: Time taken " +	timeTaken);	
	return PIPELET_NEXT;
}

function createFeedFile(tempFolder : String, fileOriginal : String, args : PipelineDictionary) : String
{
	//feed file writer
	var feedFile = "case_" + fileOriginal;
	var xmlReader : XMLStreamReader = null;
	var element : XML = null;
	var productid : String = null;
	try {
		var filePath : String = File.IMPEX + "/src" + File.SEPARATOR + tempFolder + File.SEPARATOR;
		var file : File = new File(filePath + fileOriginal);
		var fileReader : FileReader = new FileReader(file);
		if( !fileReader ) {
			Logger.error("CustomInventoryFeed: File not found: " + file);
		} else {
			var fileOut : File = new File(filePath + feedFile);
			if (! fileOut.exists()) 
			{
		    	fileOut.createNewFile();
			}
			
			var fileWriter : FileWriter = new FileWriter(fileOut);
			var writer : XMLStreamWriter  = new XMLStreamWriter(fileWriter);
	
           
           //reader file using stream reader
           	var countProduct = 0;
            var writeProductValue : String="";
			var productIdValue : String="";
			var newProductIdValue : String="";
			var tempLocalName : String="";
			var parseEvent : Number = 0;
			var newAllocation : Number=0;
			var newallocationvalue : Boolean =false;
			xmlReader = new XMLStreamReader(fileReader);
			file = null;
			fileOut = null;
			while (xmlReader.hasNext()) {
				parseEvent = xmlReader.next();
				if (parseEvent==XMLStreamConstants.START_ELEMENT) {
					tempLocalName = StringUtils.trim(xmlReader.getLocalName());
				  if (INVENTORY==tempLocalName) {
				  	writer.writeStartElement(INVENTORY);
				  	writer.writeDefaultNamespace(xmlReader.getNamespaceURI());
				  //	writer.writeNamespace("xmlns",xmlReader.getNamespaceURI());
				  	//writer.writeAttribute("xmlns", xmlReader.geta)
				  	writer.writeRaw("\r\n");
				  } else if (INVENTORY_LIST==tempLocalName) {
				  	writer.writeStartElement(INVENTORY_LIST);
				  } else if (HEADER==tempLocalName) {
		      	  	writer.writeStartElement(HEADER);
					writer.writeAttribute(LIST_ID, xmlReader.getAttributeValue(null,LIST_ID));
					element = xmlReader.XMLObject;
		      	  	for each( var childs : XML in element.children() ) {
		      	  		if( childs.localName() =="custom-attributes") {
							writer.writeStartElement("custom-attributes");
							for each( var childsChilds : XML in childs.children() ) {
								if( childsChilds.localName() =="custom-attribute") {
									writer.writeStartElement("custom-attribute");
									writer.writeAttribute("attribute-id", "snapShotDateTime");
									writer.writeCharacters(childsChilds.children().toString());
									writer.writeEndElement();
								} else {
									writer.writeStartElement(childsChilds.localName().toString());
									writer.writeCharacters(childsChilds.valueOf().toString());
									writer.writeEndElement();
								}
							}
							writer.writeEndElement();
						} else {
							writer.writeStartElement(childs.localName().toString());
							writer.writeCharacters(childs.valueOf().toString());
							writer.writeEndElement();
						}
					}
					writer.writeEndElement();//header end
					writer.writeRaw("\r\n");
			      } else if (RECORDS==tempLocalName) {
				  	writer.writeStartElement(RECORDS);
					//writer.writeRaw("\r\n");
				  } else if (RECORD==tempLocalName) {
				  	countProduct++;
				  	writeProductValue = "";
			      	productIdValue = xmlReader.getAttributeValue(null,PRODUCT_ID);
					element = xmlReader.XMLObject;
					if (isProductExist(productIdValue)) {
						//product found
						writeProductValue = productIdValue;
						newallocationvalue=false;
						if (!isPreorderProduct(productIdValue) && isProductQtyReconcilationReq(productIdValue)) {
							newallocationvalue=true;
							for each( var childs : XML in element.children() ) {
							if( childs.localName().toString()=="allocation") {
								newAllocation =	childs.valueOf();
								newAllocation = parseInt(newAllocation) - getStockReconcilationQty(productIdValue);
								if (newAllocation<0) {newAllocation=0;}
							}}
						}
						
					} else {
						//product if not found
						//Create new PID by replacing COL OR PCE with CA
						if (productIdValue.indexOf(CONST_COL) > -1) {
							newProductIdValue = productIdValue.substring(0,productIdValue.indexOf(CONST_COL))+ CONST_CA+productIdValue.substr(productIdValue.indexOf(CONST_COL)+3);
						} else if (productIdValue.indexOf(CONST_PCE) > -1) {
							newProductIdValue = productIdValue.substring(0,productIdValue.indexOf(CONST_PCE))+ CONST_CA+productIdValue.substr(productIdValue.indexOf(CONST_PCE)+3);
						}else{
							newProductIdValue = productIdValue;
						}
						
						//Check if new PID exists as case product in HashSet 
						if (isProductExist(newProductIdValue)) {
							//product found
							writeProductValue = newProductIdValue;
							var oldAllocation:Number=0;
							for each( var childs : XML in element.children() ) {
							if( childs.localName().toString()=="allocation") {
								oldAllocation =	childs.valueOf();
							}}
							//calculate allocation of case product
							newAllocation= Math.floor(oldAllocation/getCaseSize(newProductIdValue));
							if(isProductQtyReconcilationReq(newProductIdValue)) {
								newAllocation = parseInt(newAllocation) - getStockReconcilationQty(newProductIdValue);
								if (newAllocation<0) {newAllocation=0;}
							}							
							newallocationvalue=true;
							
						} else {
							//product not in DMW
							writeProductValue = productIdValue;
							newallocationvalue=false;
						}
					}
					if (!empty(writeProductValue) && !isPreorderProduct(writeProductValue)) {
						writer.writeStartElement(RECORD);
						writer.writeAttribute(PRODUCT_ID, writeProductValue);
						
						for each( var childs : XML in element.children() ) {
							if( childs.localName().toString()=="allocation") {
								writer.writeStartElement(childs.localName().toString());
								if(newallocationvalue){
									writer.writeCharacters(newAllocation);
								}else{
									writer.writeCharacters(childs.valueOf().toString());
								}
								writer.writeEndElement();
							} else if(childs.localName() .toString()=="allocation-timestamp") {
								writer.writeCharacters("");
							}else if (childs.localName()){
								writer.writeStartElement(childs.localName().toString());
								writer.writeCharacters(childs.valueOf().toString());
								writer.writeEndElement();
							}
						}
						writer.writeEndElement();
						writeProductValue = "";
				  	}					
			      }
			    }
				if (countProduct==100) {
					writer.flush();
					countProduct = 0;
				}
            }
           xmlReader.close();   // close reader
           
			writer.writeEndElement();//records ends
			writer.writeEndElement();//inventory-list end
			writer.writeEndElement();//inventory end
			writer.writeEndDocument();
			writer.flush();
			writer.close();
			fileWriter.close();			
		}
		technicalError = "FALSE";
	} catch (e) {
		technicalError = "TRUE";
		Logger.getLogger("CustomInventoryFeed").error( "CustomInventoryFeed: Error " + e.message );
		statusmessage= "Error Message:CustomInventoryFeed: Error " + e.message;
		
		//Logger.getLogger("CustomInventoryFeed").debug( "CustomInventoryFeed: Error " + e );
	}
	return feedFile;
}

function getPidList() {
	//prepare list of Product IDs if not created already
	if (pidList==null) {
		pidList =  new HashMap();
	
		var itr : SeekableIterator = dw.catalog.ProductMgr.queryProductsInCatalog(dw.catalog.CatalogMgr.siteCatalog);
	    while (itr.hasNext()) {
	    	var product: Product = ((Product) (itr.next()));
	    	
	    	pidList.put(product.getID(),product);
	    	//if ('caseSize' in product.custom){
	    	//caseProductMap.put(product.getID(),product.custom.caseSize);
	    	//}
    	}
    	itr.close();
	}

}

function getReconcileMap() {
	
	//prepare list of Product IDs if not created already
	if (reconcileMap==null) {
		reconcileMap =  new HashMap();
	   try{
	   	
	     /*var hname: dw.web.URL=dw.web.URLUtils.httpHome();
	   	 var httphost:Array=hname.toString().split("/");
	   	 var host:String=dw.system.System.instanceHostname;
	   	 if(httphost.length > 2 ){
	   	     host=httphost[2];
	   	 }*/	   	
	    var host:String=dw.system.System.instanceHostname; 
	    var requestData : String =dw.system.Site.getCurrent().getCustomPreferenceValue('pastOrderDays'); ;
	    var siteList:ArrayList =dw.system.Site.getCurrent().getCustomPreferenceValue('InvokeWebserviceSites');
	    var prodJson:String="";
	    var obj:String=null;
	    var httpClientReq : HTTPClient =null;
	    var urlOrderUpdate : String ="";
	    var jsondata : Object=null;
      	for(var k=0; k < siteList.length; k++) { 
		    urlOrderUpdate  = "https://"+host+"/on/demandware.store/Sites-"+siteList[k]+"-Site/default/FeedSteps-GetPastOrders?orderDays="+requestData+"&invStockLevel="+inventoryStockLevel; 
			httpClientReq = new HTTPClient();
			httpClientReq.open("POST", urlOrderUpdate);
			httpClientReq.send();
			if (httpClientReq.statusCode == 200){
				 prodJson=httpClientReq.text;
			     jsondata = JSON.parse(prodJson);
			    for(var i in jsondata) {
					 var item = jsondata[i];
					 if(reconcileMap.containsKey(item.pid)){
					 	  obj=reconcileMap.get(item.pid);
					      reconcileMap.put(item.pid, parseInt(obj)+parseInt(item.qty));
				      }else{
				    	  reconcileMap.put(item.pid, item.qty);
					 }	
			   }
			 }else{
			 	 reconcileMap=null;
			 	 technicalError = "TRUE";
			}
      	}
	  
	   }catch(e){
	      reconcileMap=null;
	      technicalError = "TRUE";
	      Logger.getLogger("CustomInventoryFeed").error("getReconcileMap: "+e.message);
	   } 
	   
	 }

}
function isProductExist(pid : String) : Boolean {
	//check if Product ID passed as parameter exists in the list
	var pidExists : Boolean = false;
	
	if (null == pidList) {
		getPidList();
	}
	
	if (pidList.containsKey(pid)) {
		pidExists = true;
	}
	return pidExists;
}

function isProductQtyReconcilationReq(pid : String) : Boolean {
	//check if Product ID passed as parameter exists in the map
	var pidExists : Boolean = false;
	
	if (null == reconcileMap) {
		getReconcileMap();
	}
	
	if (null == reconcileMap) {
		pidExists = false;
	}else if (reconcileMap.containsKey(pid)) {
		pidExists = true;
	}
	return pidExists;
}

function getCaseSize(pid : String) : Number {
	//check if Product ID passed as parameter exists in the list
	if (null == pidList) {
		getPidList();
	}
	
	var product : Product = pidList.get(pid);
	var caseSize : Number=1;
	if ('caseSize' in product.custom && product.custom.caseSize>0){
    	caseSize=product.custom.caseSize;
    	}
	
	return caseSize;
}

function isPreorderProduct(pid : String) : Boolean {
	//check if Product ID passed as parameter exists in the list
	if (null == pidList) {
		getPidList();
	}
	var preorderProduct : Boolean=false;
	var invRecord:ProductInventoryRecord=null;
	if(pidList.containsKey(pid)) {
		var product : Product = pidList.get(pid);
		var cal:Calendar=new Calendar(new Date());
		cal.set(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 0, 0 ,0);
		if((product.availabilityModel.availabilityStatus.equalsIgnoreCase(dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER) || product.availabilityModel.availabilityStatus.equalsIgnoreCase(dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER))){
	    	if(empty(product.availabilityModel.inventoryRecord.inStockDate))
			{ preorderProduct=true; }
			else {
		    	var calInStockDate:Calendar=new Calendar(product.availabilityModel.inventoryRecord.inStockDate);
				if(calInStockDate.after(cal)){
		    	    preorderProduct=true;
				} else {
		    		invRecord= product.availabilityModel.getInventoryRecord();
		    	    invRecord.setPreorderBackorderAllocation(0);
		    	    invRecord.preorderable=false;  
		    	    preorderProduct=false;
		    	}
			}
	    }
	}
	return preorderProduct;
}

function getStockReconcilationQty(pid : String) : Number {
	//check if Product ID passed as parameter exists in the list
	if (null == reconcileMap) {
		return 0;
	}	 
	var count:Number=reconcileMap.get(pid); 
	if(count >= 0 ){ 
	  return count;
	}else{
	  return 0;	
	}
}