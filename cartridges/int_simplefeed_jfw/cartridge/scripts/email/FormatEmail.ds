/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input EmailFlow : String (Mandatory)Field indicates the email flow name.
*   @input ContentAssetID : String Field indicates the content asset ID contain email body data..
*   @input MailParams : dw.util.HashMap Field indicates the key value pair where key will be placeholder in mail body content asset and value will be dynamic data.
*	@output MailContent : String Formatted email body content.
*	@output FailedMessage : String Fail Message.
*
*/
importPackage( dw.system );
importPackage( dw.content );
importPackage( dw.util );
importScript( "email/stringReplace.ds" );

function execute( args : PipelineDictionary ) : Number
{
    var failedMessage : String = "";
	var mailBody : String = "";
	var header : String = "";
	var footer : String = ""; 
	var mailFlow : String = args.EmailFlow;
	args.MailContent = "";
	try
	{
		if (!empty(args.EmailFlow)) {
			var regExp : RegExp = null;
			
			var headerCAID : String = "";
			var footerCAID : String = ""; 
			var mailContentAssetID : String = args.ContentAssetID;
			var mailParams : dw.util.HashMap = args.MailParams;

			//header content asset id retrive
	    	var headerPreferences : Array = dw.system.Site.getCurrent().preferences.custom.emailHeader;
	    	for (var i=0; i < headerPreferences.length; i++) {
				if (mailFlow == headerPreferences[i].getValue()) {
					headerCAID = headerPreferences[i].getDisplayValue();
					break;
				}
	    	}
	    	//get header content
			var headerContent : Content = ContentMgr.getContent(headerCAID);
			if (!empty(headerContent) && headerContent.online && !empty(headerContent.custom.body)) {
				header = StringUtils.decodeString(headerContent.custom.body.toString(), StringUtils.ENCODE_TYPE_HTML);
			}
	
			//footer content asset id retrive
	    	var footerPreferences : Array = dw.system.Site.getCurrent().preferences.custom.emailFooter;
	    	for (var i=0; i < footerPreferences.length; i++) {
				if (mailFlow == footerPreferences[i].getValue()) {
					footerCAID = footerPreferences[i].getDisplayValue();
					break;
				}
	    	}
	    	//get footer content
			var footerContent : Content = ContentMgr.getContent(footerCAID);
			if (!empty(footerContent) && footerContent.online && !empty(footerContent.custom.body)) {
				footer = StringUtils.decodeString(footerContent.custom.body.toString(), StringUtils.ENCODE_TYPE_HTML);
			}

			//get the mail body content
			var emailBodyContent : Content = ContentMgr.getContent(mailContentAssetID);
		    if (!empty(emailBodyContent) && emailBodyContent.online && !empty(emailBodyContent.custom.body))
		    {
		    	mailBody = StringUtils.decodeString(emailBodyContent.custom.body.toString(), StringUtils.ENCODE_TYPE_HTML);
		    }

			//combine header, body and footer content. this way entire mail body content can be replaced with the tag params passed
			mailBody = header + "" + mailBody + "" + footer;
			
			//trim all tags
		    mailBody = trimTagContent(mailBody);

		    //replace by hostname
		    regExp = new RegExp("<&instanceName&>");
		    mailBody = replaceAll(mailBody, regExp, System.getInstanceHostname());
		    
		    //append the absolute url for content with static link
		    regExp = new RegExp("src=\"/");
		    mailBody = replaceAll(mailBody, regExp, "src=\"http://"+ System.getInstanceHostname() + "/");
		    //replace https in image source with http
		    regExp = new RegExp("src=\"https://");
		    mailBody = replaceAll(mailBody, regExp, "src=\"http://");
		    
		    
			//Replace placeholder with value of placeholder as key in map
		    if ( null!=mailParams && mailParams.length>0)
		    {
		    	var paramIterator : Iterator = mailParams.keySet().iterator();
		    	while (paramIterator.hasNext()) {
		    		var paramKey : String = paramIterator.next();
		    		//parse content with regular expression "^<&*&>$"
		    		regExp = new RegExp("(<&)"+paramKey+"(&>)");
		    		mailBody = replaceAll(mailBody, regExp, mailParams.get(paramKey));
		    	}
		    }
			    
			    //replace remaining placeholder with empty string
				//regExp = new RegExp("(<&).*(&>)");
				//mailBody = replaceAll(mailBody, regExp, "");   
		}
		args.MailContent = mailBody; 
	} catch(e) {
    	Logger.getLogger("FormatEmail").error( e );
    	failedMessage = "FormatEmail: "+e;
    	args.FailedMessage = failedMessage;
		return PIPELET_ERROR;
	}    
   return PIPELET_NEXT;
}

function trimTagContent(mailBody : String) : String {
	var regExp : RegExp = new RegExp("(<& +)");
	while(regExp.test(mailBody))
	{
		mailBody = mailBody.replace(regExp, "<&");
	}
	regExp = new RegExp("( +&>)");
	while(regExp.test(mailBody))
	{
		mailBody = mailBody.replace(regExp, "&>");
	}	
	return mailBody;
}