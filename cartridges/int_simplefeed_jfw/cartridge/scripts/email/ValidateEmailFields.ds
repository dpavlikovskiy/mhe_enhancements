/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input MailFrom : String (Optional)Field indicates the From Email ID depicted in email.
*   @input MailTo : String (Optional)Field indicates the To Email ID depicted in email.
*   @input MailCC : String (Optional)Field indicates the CC Email ID depicted in email.
*   @input MailBCC : String (Optional)Field indicates the BCC Email ID depicted in email.
*   @input MailSubject : String (Optional)Field indicates the subject of email without Instance Name. This subject prefered if available.
*   @input EmailFlow : String (Mandatory)Field indicates the email flow name.
*   @output OutMailFrom : String
*   @output OutMailTo : String
*   @output OutMailCC : String
*   @output OutMailBCC : String
*   @output OutMailSubject : String
*   @output OutMailContentAssetID : String
*   @output FailedMessage : String Fail Message.
*/
importPackage( dw.content );
importPackage( dw.system );
importPackage( dw.util );


function execute( args : PipelineDictionary ) : Number
{
	Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: start ");	
    var failedMessage : String = "";
    var patterString : String = dw.system.Site.getCurrent().preferences.custom.emailValidationPattern;
    var regExp : RegExp = new RegExp(patterString);
	// read parameters
	var mailFrom : String = args.MailFrom;
	var mailTo : String = args.MailTo;
	var mailCC : String = args.MailCC;
	var mailBCC : String = args.MailBCC;
	var mailSubject : String = args.MailSubject;
	var mailFlow : String = args.EmailFlow;
	var mailContentAssetID : String = "";

    // check parameters
    if ( empty( mailFlow ) )
    {
    	Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: EmailFlow empty" );
    	failedMessage = "ValidateEmailFields: EmailFlow empty";
    	args.FailedMessage = failedMessage;
    	return PIPELET_ERROR;
    }

    if ( empty( mailSubject ) )
    {
    	if (!empty(session.custom.brand) && !session.custom.brand.equals("mh")) {
    		var emailSubjectPreferences : Array = dw.system.Site.getCurrent().getCustomPreferenceValue("emailSubject"+session.custom.brand.toUpperCase());
    		if (!empty(emailSubjectPreferences)) {
	    		for (var i=0; i < emailSubjectPreferences.length; i++) {
					if (StringUtils.trim(mailFlow) == emailSubjectPreferences[i].getValue()) {
						mailSubject = emailSubjectPreferences[i].getDisplayValue();
						break;
					}
				}
    		}
    	}
    	if ( empty( mailSubject ) ) {
			var emailSubjectPreferences : Array = dw.system.Site.getCurrent().preferences.custom.emailSubject;
			for (var i=0; i < emailSubjectPreferences.length; i++) {
				if (StringUtils.trim(mailFlow) == emailSubjectPreferences[i].getValue()) {
					mailSubject = emailSubjectPreferences[i].getDisplayValue();
					break;
				}
			}
	    }
	}


    if ( empty( mailContentAssetID ) )
    {
    	var preferences : Array = dw.system.Site.getCurrent().preferences.custom.emailBodyContentAsset;
    	for (var i=0; i < preferences.length; i++) {
			if (mailFlow == preferences[i].getValue()) {
				mailContentAssetID = preferences[i].getDisplayValue();
				break;
			}
    	}
    }

	var emailBodyContent : Content = ContentMgr.getContent(mailContentAssetID);
    if ( null == emailBodyContent || !emailBodyContent.online)
    {
    	Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: MailContentAssetID ("+emailBodyContent+") either not exists or offline" );
    	failedMessage = "ValidateEmailFields: MailContentAssetID ("+emailBodyContent+") either not exists or offline";
    	args.FailedMessage = failedMessage;
    	return PIPELET_ERROR;
    }
    
    
    if ( !empty( mailFrom ) )
    {
		if (!regExp.test(mailFrom)) {
	    	Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: MailFrom ("+mailFrom+") validation failed" );
	    	failedMessage = "ValidateEmailFields: MailFrom ("+mailFrom+") validation failed";
	    	args.FailedMessage = failedMessage;
    		return PIPELET_ERROR;
		}
		Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: email for log "+mailFrom);	
    } else {
    		mailFrom = dw.system.Site.getCurrent().preferences.custom.mailFrom;
    }    
    
    if ( !empty( mailTo ) )
    {
		if (!regExp.test(mailTo)) {
	    	Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: MailTo ("+mailTo+") validation failed" );
	    	failedMessage = "ValidateEmailFields: MailTo ("+mailTo+") validation failed";
        	args.FailedMessage = failedMessage;
    		return PIPELET_ERROR;
		}    	
    } else {
    	mailTo = dw.system.Site.getCurrent().preferences.custom.mailTo;
    } 
       
    if ( !empty( mailCC ) )
    {
		if (!regExp.test(mailCC)) {
	    	Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: MailCC ("+mailCC+") validation failed" );
	    	failedMessage = "ValidateEmailFields: MailCC ("+mailCC+") validation failed";
        	args.FailedMessage = failedMessage;
    		return PIPELET_ERROR;
		}    	
    } else {
    	mailCC = dw.system.Site.getCurrent().preferences.custom.mailCC;
    }   
     
    if ( !empty( mailBCC ) )
    {
		if (!regExp.test(mailBCC)) {
	    	Logger.getLogger("ValidateEmailFields").error( "ValidateEmailFields: MailBCC ("+mailBCC+") validation failed" );
	    	failedMessage = "ValidateEmailFields: MailBCC ("+mailBCC+") validation failed";
        	args.FailedMessage = failedMessage;
    		return PIPELET_ERROR;
		}    	
    } else {
    	mailBCC = dw.system.Site.getCurrent().preferences.custom.mailBCC;
    } 
       
	args.OutMailFrom = mailFrom;
	args.OutMailTo = mailTo;
	args.OutMailCC = mailCC;
	args.OutMailBCC = mailBCC;
	args.OutMailSubject = mailSubject;
	args.OutMailContentAssetID = mailContentAssetID;
   return PIPELET_NEXT;
}
