/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @output orderNumber  : String
*
*
*/
importPackage(dw.system );
importPackage(dw.order);
importPackage(dw.util);

function execute( pdict : PipelineDictionary ) : Number
{
	  //We need to get the last (or a least a vaild starting order number to start with)
	  var orderStartDate : Date =  System.getCalendar().getTime() ;
	  var querry : String = "creationDate > {0}";
	  var orderIt : SeekableIterator  = OrderMgr.queryOrders(querry, "creationDate asc" , orderStartDate);
	  var orderNo : String = "N/A";
      var orderList : List = orderIt.asList();
     // Need to make sure that we do not loop for ever. This will make sure that we only 
     // go back 7 days, if the first query returns null. Which means no orders for today.
     // may happen if this runs 1 minute after midnight for example. Should make this a preference
      var loopCheck : Number = 0;     	
      Logger.debug("we have " + orderList.length);
      	
      while(checkValidList(orderList) && loopCheck < 7){
       	 var year : Number = orderStartDate.getFullYear();
      	 var month : Number = orderStartDate.getMonth();
      	 var day : Number = orderStartDate.getDate();
      	 //Get back one day each time through
      	 day--;
      	 orderStartDate = new Date(year,month,day);
      	 orderIt  = OrderMgr.queryOrders(querry, "creationDate asc" , orderStartDate);
      	 orderList = orderIt.asList();
      	 loopCheck++;
      }
      if(loopCheck == 7){
      		orderNo = "N/A";
      		
      }else{
     		 Logger.debug("we have  " + orderList.length);
     		 orderNo = getLastOrderNumber(orderList);
        
      }  
      orderIt.close();
      Logger.debug(orderNo);
      pdict.orderNumber = orderNo;
     
     return PIPELET_NEXT;
}

function getLastOrderNumber(list : List) : String
{
	var size : Number = list.size();
	// Get the last order in the list. This should be the newest order
	// based on date. 0 based index
	var tmp_order : Order = list.get(size -1);
	var orderNumber : String = tmp_order.getOrderNo();
	return orderNumber;
}

function checkValidList(list : List) : Boolean
{
	return list.isEmpty();	
}