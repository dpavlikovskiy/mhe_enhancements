/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
*
* @input EPagesOrder : Boolean This indicates the order is ePagesOrder
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input Basket : dw.order.LineItemCtnr
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input CreditCardData : Object
* @input CVCode : String  Card verification code returned from ccAuthReply
* @input IPAddress : String The client's IP address
* @input lineItemList : dw.util.List 
* @input  billTo : Object 
* @input  shipTo : Object
* @input  card : Object
* @input  purchaseTotals : Object 
* @input currentCustomer : dw.customer.Customer
* @input  sessionID : String 
* @input Request : dw.system.Request
* @input  is3DSecureEnable : Boolean
* @input  PAResponseMD : String 
* @input PAResponsePARes : String
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output DMRequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output Temp : Object;
*
* @output csDeclineCounter : Number;
* @output StatusMessage : String
* Author: Danny Gehl
*/ 
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage(dw.catalog);
importPackage(dw.customer);
importPackage( dw.util );
importPackage (dw.value);
importScript('int_cybersource:cybersource/Cybersource_BillTo_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_ShipTo_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_Card_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');
function execute( pdict : PipelineDictionary ) : Number
{
	Logger.error("[DecisionManagerRequest.ds] called for order number - " + pdict.OrderNo);
	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
	var ePagesOrder : Boolean = !empty(pdict.EPagesOrder)?pdict.EPagesOrder:false;
	var amount : dw.value.Money = pdict.Amount;
	var ccdata : CreditCardInfoHelper = pdict.CreditCardData;
    var orderNo : String = pdict.OrderNo;
   	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var mddFieldMap : HashMap= new HashMap();
	var cal:Calendar = new Calendar();
	cal.setTime(new Date());
	
	//var merchantDefinedDataObject: MerchantDefinedData_Object = pdict.merchantDefinedData;
	var counter : Number = 0;//counter added for retry of Decision manager - Chetan
	//Add cvCode in the afs request
	var cvCode : String = pdict.CVCode;
	  
    var request : Request = pdict.Request;
	/*
	//Praveen- Added for setting attribute 'csDeclineCounter' and 'csErrorCounter' for checking the declined attempts and error scenarios
	if(session.custom.csDeclineCounter == null)
	{
		var csDeclineCounter : Number = 0;
		session.custom.csDeclineCounter = csDeclineCounter;
	}
	
	if(session.custom.csErrorCounter == null)
	{
		var csErrorCounter : Number = 0;
		session.custom.csErrorCounter = csErrorCounter;
	}
	//end
	*/

	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var CybersourceHelper = getCybersourceHelper();	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	CybersourceHelper.setEndpoint(service);
	mddFieldMap.put("EpageOrder", ePagesOrder.toString());
	if(!empty(pdict.currentCustomer.activeData)){
	mddFieldMap.put("firstTimePurchase",empty(pdict.currentCustomer.activeData.lastOrderDate));
	}
	if(!empty(pdict.currentCustomer.profile)){
	var accountAge : Number = Math.round((cal.getTime() - pdict.currentCustomer.profile.getCreationDate().getTime())/(60 * 60 * 1000 * 24));
	mddFieldMap.put("AccountAge", accountAge);
	
	if("registrationSource" in pdict.currentCustomer.profile.custom)
	mddFieldMap.put("registrationSource", pdict.currentCustomer.profile.custom.registrationSource);
	}
	
	if(pdict.currentCustomer.registered){
		if(Site.getCurrent().getCustomPreferenceValue("ignoreCustomerGroupSAPID")){
			if ('sapCustomerId' in pdict.currentCustomer.profile.custom){
			mddFieldMap.put("SAPCustomerID", pdict.currentCustomer.profile.custom.sapCustomerId) ;
			} 
		}else {
			var customerGroups: Collection = pdict.currentCustomer.customerGroups;
			var iter: Iterator  = customerGroups.iterator();
			while (iter.hasNext())
			{
				var customerGroup : CustomerGroup = iter.next();
				if ('sapCustomerID' in customerGroup.custom && !customerGroup.ruleBased){
					mddFieldMap.put("SAPCustomerID", customerGroup.custom.sapCustomerID) ;
					break;
				} 
			}
		}

   }else{
   	  if("catID" in session.custom){
   	  	 mddFieldMap.put("epageID", session.custom.catID) ;
   	  	 var category:Category=CatalogMgr.getCategory(session.custom.catID);
   	  	 if(!empty(category)){
   	  	 	if("customerGroupID" in category.custom){
					var customerGroup = CustomerMgr.getCustomerGroup(category.custom.customerGroupID);
						if (null!=customerGroup && 'sapCustomerID' in customerGroup.custom){
							mddFieldMap.put("SAPCustomerID", customerGroup.custom.sapCustomerID) ;
						} 
					}
   	  	 
   	  	 }
   }
   
   }
   if(empty(mddFieldMap.get("SAPCustomerID")) && !empty(Site.getCurrent().getCustomPreferenceValue("defaultSapCustomerId")))
	{ mddFieldMap.put("SAPCustomerID",Site.getCurrent().getCustomPreferenceValue("defaultSapCustomerId")); } 
   
	if(!empty(pdict.Basket)){
		mddFieldMap.put("voucherUsed",!empty(pdict.Basket.getCouponLineItems()));
		if(pdict.Basket.customer.registered){
		mddFieldMap.put("customerID",pdict.Basket.getCustomerNo());
		}
	}else{
		mddFieldMap.put("voucherUsed",false);
	}
	mddFieldMap.put("failedAuthCount", ("authErrorCount" in session.custom)?session.custom.authErrorCount:0);
	mddFieldMap.put("3dSecureEnroll", !empty(pdict.is3DSecureEnable)?pdict.is3DSecureEnable:false);
	if(!CybersourceHelper.createDMHeader(service))
	{
		pdict.StatusMessage="Cybersource Down.Please Check Error while calling create DMHeader to service";
		return PIPELET_ERROR;
	}
	

	//**************************************************************************//
	// the request object holds the input parameter for the AUTH request
	//**************************************************************************//	
	var request = new csReference.RequestMessage();
	//CybersourceHelper.addCCAuthRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,basket.UUID);		
	
	var sessionID : String = pdict.sessionID;
	
	
		CybersourceHelper.addAFSRequestInfo(request,cvCode);
		CybersourceHelper.addDecisionManagerRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,orderNo,pdict.lineItemList, mddFieldMap,CybersourceHelper.getDigitalFingerprintEnabled());

		
		Logger.error("request CVCode #######"+request.afsService.cvCode);
	
	writeOutDebugLog(request,orderNo);

	//**************************************************************************//
	// Execute Request
	//**************************************************************************//	
	var response = null;
	while(counter<3)
	{
		try
		{
			Logger.debug("[DecisionManager.ds] Sending Decision Manager...");
			Logger.error("[DecisionManager.ds] Sending Decision Manager... for order number - " + pdict.OrderNo);
			response = service.runTransaction(request);
			Logger.error("[DecisionManager.ds] Sent successfully Decision Manager... for order number - " + pdict.OrderNo);
			break;
		}
		catch(e)
		{
			Logger.getRootLogger().fatal("[DecisionManagerRequest.ds] Error in CCAuthRequestInfo request ( {0} )",e.message);
			pdict.StatusMessage="[DecisionManagerRequest.ds] Error in CCAuthRequestInfo request "+e.message;
			
			counter = counter +1;
			if(counter==3)  
			{
			pdict.Decision = "ERROR";
			return PIPELET_ERROR;
			}
		}
	}
	
	if(response == null)
	{
		Logger.getRootLogger().fatal("[DecisionManagerRequest.ds] Error in CCAuthRequestInfo: null response");
		pdict.StatusMessage="[DecisionManagerRequest.ds] Error in CCAuthRequestInfo: null response";
		return PIPELET_ERROR;
	}
		
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	pdict.Temp = protocolResponse( response );
	//pdict.Temp = getAvailableFunctions( service );
	
	pdict.DMRequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	
	Logger.error("The request ID for Decision Manager call: " + response.requestID);
	Logger.error("For Reason Code"+response.reasonCode.get() +" : Response from Cybersource : " +response.decision);
	
	
	
	
	
	//**************************************************************************//
	//Log response code specific data for further processing
	//**************************************************************************//
	var logTransactionData : String = " Order No = " +orderNo;
	logTransactionData += ", Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
	 
	switch ( response.reasonCode.get() )
	{
		case 100:	
			Logger.info("[CCAuthRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction.");
			break;	
		case 101:	
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 101] [FATAL] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. Missing fields are:- ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 101] [FATAL] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. Missing fields are:- ";
			if(null != response.missingField)
			{
				for(var i =0 ; i<response.missingField.length; i++){
					Logger.warn(response.missingField[i]);
				}
			}
			break;	
		case 102:								
			//Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. Invalid fields are:- "+new ArrayList(response.invalidField).toString());
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. Invalid fields are:- ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. Invalid fields are:- ";
			if(null != response.invalidField)
			{
				for(var i =0 ; i<response.invalidField.length; i++){
					Logger.warn(response.invalidField[i]);
				}
			}
			break;	
		case 150:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 150] [FATAL] " + logTransactionData + " Error Message = Error: General system failure.");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 150] [FATAL] " + logTransactionData + " Error Message = Error: General system failure.";
			break;				
		case 151:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 151] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 151] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ";
			break;				
		case 152:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 152] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 152] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ";
			break;	
		case 234:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 234] [FATAL] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 234] [FATAL] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager";
			break;
		case 400:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 400] [WARN] " + logTransactionData + " Error Message = The fraud score exceeds your threshold. - Customer support to handle the order. ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 400] [WARN] " + logTransactionData + " Error Message = The fraud score exceeds your threshold. - Customer support to handle the order. ";
			break;
		case 480:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 480] [WARN] " + logTransactionData + " Error Message = The order is marked for review by Decision Manager. - ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 480] [WARN] " + logTransactionData + " Error Message = The order is marked for review by Decision Manager. - ";
			break;						
		case 481:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 481] [WARN] " + logTransactionData + " Error Message = The order is rejected by Decision Manager. - Customer support to handle the order. ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code: 481] [WARN] " + logTransactionData + " Error Message = The order is rejected by Decision Manager. - Customer support to handle the order.";
			break;			
		default:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code:" + response.reasonCode.get() +"] [WARN] " + logTransactionData + ", Error Message = Authorization Denied - ");
			pdict.StatusMessage="Error Message:[CCAuthRequest] [Cybersource Reson Code:" + response.reasonCode.get() +"] [WARN] " + logTransactionData + ", Error Message = Authorization Denied - ";
			break;
	}
	
    return PIPELET_NEXT;
  
}

function protocolResponse( response ) : HashMap
{
	var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	if( true || debug )
	{
		var arr : HashMap = new HashMap();
		var xx : String;
		for ( xx in response )
		{
			arr.put( xx, response[xx] );
		}
		for ( xx in response.payPalPaymentReply )
		{
			trace( "checking " + xx );
			try
			{
				arr.put( "PayPalPaymentReply." + xx, response.payPalPaymentReply[xx] );
			}
			catch ( exception )
			{
				arr.put( "PayPalPaymentReply." + xx, " caused ex " + exception );
			}
		}
		
		var nullList : Array = new Array();
		var qq : String;
		var iter : Iterator;
		var retMap : HashMap = new HashMap();
		for ( iter = arr.keySet().iterator(); iter.hasNext(); )
		{
			qq = iter.next();
			if ( arr.get( qq ) == null )
			{
				nullList.push( qq );
				// arr.remove( qq );
			} 
			else
			{
				retMap.put( qq, arr.get( qq ) );
			}
		} 
		if ( qq.length > 0 )
		{
			retMap.put( "<<NullList>>", nullList ); 
		}
		return retMap;
	}
}

function writeOutDebugLog(request : Object, orderNo : String)
{
	var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	if( debug )
	{
		var dir : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "cybersourcelogs").mkdir();
		var file :  dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "cybersourcelogs" + dw.io.File.SEPARATOR + orderNo + ".txt");
		var fw : dw.io.FileWriter = new  dw.io.FileWriter(file);
		fw.writeLine("REQUEST DATA SENT TO CYBERSOURCE");
		fw.writeLine("billTo.firstName " + request.billTo.firstName);
		fw.writeLine("billTo.lastName " + request.billTo.lastName);
		fw.writeLine("billTo.street1 " + request.billTo.street1);
		fw.writeLine("billTo.city " + request.billTo.city);
		fw.writeLine("billTo.state " + request.billTo.state);
		fw.writeLine("billTo.postalCode " + request.billTo.postalCode);
		fw.writeLine("billTo.country " + request.billTo.country);
		fw.writeLine("shipTo.firstName " + request.shipTo.firstName);
		fw.writeLine("shipTo.lastName " + request.shipTo.lastName);
		fw.writeLine("shipTo.street1 " + request.shipTo.street1);
		fw.writeLine("shipTo.city " + request.shipTo.city);
		fw.writeLine("shipTo.state " + request.shipTo.state);
		fw.writeLine("shipTo.postalCode " + request.shipTo.postalCode);
		fw.writeLine("shipTo.country " + request.shipTo.country);
		fw.writeLine("Currency " + request.purchaseTotals.currency);
		fw.writeLine("grandTotalAmount " + request.purchaseTotals.grandTotalAmount);
		fw.writeLine("taxAmount " + request.purchaseTotals.taxAmount);
		fw.writeLine("card fullname " + request.card.fullName);
		
		fw.flush();
		fw.close();
	}
}