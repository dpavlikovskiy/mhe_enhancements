/**
* This script validates the PayerAuth information the customer provided 
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input PaRes : String The PaRes returned by the authentication
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
*
* @input  billTo : Object 
* @input  shipTo : Object
* @input  item : Array
* @input  card : Object
* @input  purchaseTotals : Object
*
* @output PA_Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output PA_ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output PA_RequestID : String The request id generated by Cybersource
* @output PA_RequestToken : String the token generated by Cybersource
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output AuthenticationResult : String the return field
* @output AuthenticationStatusMessage : String the return field
* @output CAVV : String the return field
* @output UCAFAuthenticationData : String the return field
* @output UCAFCollectionIndicator : String the return field
* @output CommerceIndicator : String the return field
* @output XID : String the return field
* @output ECIRaw : String the return field
* @output ParesStatus : String paresStatus as returned by Cybersource
* @output StatusMessage : String 
*
*/
importPackage( dw.system );

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	Logger.error("[PayerAuthValidation.ds] called for order number - " + pdict.OrderNo);
	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
    var amount : dw.value.Money = pdict.Amount;
    var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
    var orderNo : String = pdict.OrderNo;
    var signedPaRes : String = dw.util.StringUtils.trim(pdict.PaRes);
    var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
    
    
	//var signedPaRes : String =pdict.PaRes;
	signedPaRes = signedPaRes.replace(/[^a-zA-Z0-9/+=]/g,"");

	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");

	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addPayerAuthValidateInfo(request,orderNo,signedPaRes,creditCardForm,amount,pdict.item);
	CybersourceHelper.addCCAuthRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,orderNo,CybersourceHelper.getDigitalFingerprintEnabled(),pdict.item);
	
	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */
	

	var response = null;
	// send request
	try{
		Logger.debug("[PayerAuthValidation.ds] Sending PayerAuthValidation...");
		Logger.error("[PayerAuthValidation.ds] Sending PayerAuthValidation...for order number - " + pdict.OrderNo);
		response = service.runTransaction(request);
		Logger.error("[PayerAuthValidation.ds] Sent successfully PayerAuthValidation...for order number - " + pdict.OrderNo);
	}catch(e){
		Logger.error("[PayerAuthValidation.ds] Error in PayerAuthValidation request ( {0} )",e.message);
		pdict.StatusMessage="[PayerAuthValidation.ds] Error in PayerAuthValidation request "+ e.message;
		return PIPELET_ERROR;
	}
	
	if(response == null){
		pdict.StatusMessage="Cybersource error in PayerAuthValidation. Response is null ";
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;

	pdict.PA_RequestID = response.requestID;
	pdict.PA_RequestToken = response.requestToken;
	pdict.PA_ReasonCode = response.reasonCode.get();
	pdict.PA_Decision = response.decision;
	if(pdict.PA_ReasonCode!=100 && pdict.PA_ReasonCode!=480){
	if('authErrorCount' in session.custom){
			session.custom.authErrorCount=session.custom.authErrorCount+1;
			
			}else{
			session.custom.authErrorCount= 1;
			}
	}
	if(response.payerAuthValidateReply != null){
		pdict.AuthenticationResult = response.payerAuthValidateReply.authenticationResult;
		pdict.AuthenticationStatusMessage = response.payerAuthValidateReply.authenticationStatusMessage;
		pdict.CAVV = response.payerAuthValidateReply.cavv;
		pdict.UCAFAuthenticationData = response.payerAuthValidateReply.ucafAuthenticationData;
		pdict.UCAFCollectionIndicator = response.payerAuthValidateReply.ucafCollectionIndicator;
		pdict.CommerceIndicator =  response.payerAuthValidateReply.commerceIndicator;
		pdict.XID = response.payerAuthValidateReply.xid;
		pdict.ECIRaw = response.payerAuthValidateReply.eciRaw;
		pdict.ParesStatus = response.payerAuthValidateReply.paresStatus;
	}

    return PIPELET_NEXT;
}
