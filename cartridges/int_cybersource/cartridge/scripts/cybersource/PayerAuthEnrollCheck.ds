/**
* This script cheks if a customer is enrolled for a PayerAuth program
* It always returns PIPELET_NEXT in case the request was successful.
* PIPLET_ERROR is only used in case of an technical problem 
*
*
* @input Basket : dw.order.LineItemCtnr The basket used for Authorization
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input Request : dw.system.Request This is a sample comment.
*
* @input  billTo : Object 
* @input  shipTo : Object
* @input  item : Array
* @input  card : Object
* @input  purchaseTotals : Object
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output PAReasonCode : Number The Payer Authentication reason code returned by Cybersource (100 = Success)
* @output AuthReasonCode : Number The Authorization reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output CommerceIndicator : String the commerce indicator to use credit card authorization 
* @output ProofXML : String The proof XML comfirming that a check for payer auth was done
* @output AcsURL : String - URL for the issuing Bank's authentication form
* @output PAReq : String The paReq field - Payer authentication request message that you send to the ACS through the card association
* @output XID : String The xid field - A unique transaction ID generated for each payment authentication request (PAReq) message. The PARes returned by issuing bank contains the XID of the PAReq.
* @output ProxyPAN : String The proxyPAN field - Encrypted versio of credit card number used in the payer authentication request message
* @output AuthenticationPath : String Possible Values 'ENROLLED', 'UNKNOWN', 'NOREDIRECT'. Display 3-d secure page only when it is ENROLLED
* @output StatusMessage : String
*
*/
importPackage( dw.system );
importPackage( dw.order );

importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	Logger.error("[PayerAuthEnrollCheck.ds] called for order number - " + pdict.OrderNo);
	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
    var basket : LineItemCtnr = pdict.Basket;
    var amount : dw.value.Money = pdict.Amount;
    var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;
    var orderNo : String = pdict.OrderNo;
    var request : Request = pdict.Request;
   	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;

	if((basket == null || creditCardForm == null )){
		Logger.error("Please provide a Basket and the credit card form element!");
		pdict.StatusMessage="Cybersource PAyerAuthEnrollCheck error.Please provide a Basket and the credit card form element!";
		return PIPELET_ERROR;
	}
	
	var CybersourceHelper = getCybersourceHelper();
	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");

	CybersourceHelper.setEndpoint(service);
	
	if(!CybersourceHelper.createHeader(service)){
		return null;
	}

	var request = new csReference.RequestMessage();
	
	CybersourceHelper.addCCAuthRequestInfo(request,billToObject,shipToObject,purchaseObject,cardObject,orderNo,CybersourceHelper.getDigitalFingerprintEnabled(),pdict.item);
	CybersourceHelper.addPayerAuthEnrollInfo(request,orderNo,creditCardForm,basket.billingAddress.countryCode.value,amount,request,pdict.item);

	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */

	var response = null;
	// send request
	try{
		Logger.debug("[PayerAuthEnrollCheck.ds] Sending PayerAuthEnrollCheck...");
		Logger.error("[PayerAuthEnrollCheck.ds] Sending PayerAuthEnrollCheck...for order number - " + pdict.OrderNo);
		response = service.runTransaction(request);
		Logger.error("[PayerAuthEnrollCheck.ds] Sent successfully PayerAuthEnrollCheck...for order number - " + pdict.OrderNo);
	}catch(e){
		Logger.error("[PayerAuthEnrollCheck.ds] Error in PayerAuthEnrollCheck request ( {0} )",e.message);
		pdict.StatusMessage="[PayerAuthEnrollCheck.ds] Error in PayerAuthEnrollCheck request "+ e.message;
		return PIPELET_ERROR;
	}
	
	if(response == null){
		pdict.StatusMessage="CYBERSOURCE ERROR. Error in PayerAuthEnrollCheck. response is null ";
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	if(response.ccAuthReply != null){
		pdict.AuthReasonCode = response.ccAuthReply.reasonCode.get();
	}
	if(response.payerAuthEnrollReply != null){
		pdict.CommerceIndicator = response.payerAuthEnrollReply.commerceIndicator;
		pdict.ProofXML = response.payerAuthEnrollReply.proofXML;
		pdict.AcsURL = response.payerAuthEnrollReply.acsURL;
		pdict.XID =  response.payerAuthEnrollReply.xid;
		pdict.PAReq = response.payerAuthEnrollReply.paReq;
		pdict.ProxyPAN = response.payerAuthEnrollReply.proxyPAN;
		pdict.AuthenticationPath = response.payerAuthEnrollReply.authenticationPath;
		pdict.PAReasonCode = response.payerAuthEnrollReply.reasonCode.get();
	}

    return PIPELET_NEXT;
}
