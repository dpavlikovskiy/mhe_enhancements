/**
* ValidateMigratedPassword.ds
*  
* This script will match the migrated password with the user entered password.This script will take the user enterd password and currentCustomer object as input.
*  this script will read the saltKey and migrated password from the user profile and will encrypt the userentered password using the saltkey after the succesful
* encyprion it'll match it with encypted password with the migrated password, otherwise it'll throw an error.
*
*   @input Password : String Password of the current customer.
*   @input CurrentCustomer : dw.customer.Customer Current customer.
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.crypto );

function execute( pdict : PipelineDictionary ) : Number
{
	
var saltKey:String = pdict.CurrentCustomer.profile.custom.saltKey; //Get the salt key from Current customer
var migratedPassword: String =pdict.CurrentCustomer.profile.custom.migratedPassword;//Get the migrated password from Current customer 
var password= pdict.Password;//Get the user entered password 
var md:MessageDigest=null ;
var encodedText:String=null;
	try
	{
		md= new MessageDigest(MessageDigest.DIGEST_MD5) ;
		if(saltKey!=null){
		encodedText= Encoding.toHex(md.digest(null, new Bytes(saltKey.concat(password),"UTF-8"))) ; // encode the text using the salt key and the user entered password
		}
		//compare the encode password with the migrated password
		if (encodedText!=null && !encodedText.equals(migratedPassword)){
	    return PIPELET_ERROR;
		}
	}catch (error){
		Logger.error("Password encryption failed "+error);
	}

	
	return PIPELET_NEXT;
}