/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*  @input userName : String 
*  @input password : String 
*
*  @output json : String
*  @output authSuccess : String
*  
*
*/

 importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.crypto );
importPackage( dw.customer );
importPackage( dw.net );
function execute( pdict : PipelineDictionary ) : Number
{
	
var secretKey:String = "xbQwI9N30ZrQmfZexZfeyVqusjnP9bsP"; 

var userName:String=pdict.userName;

var password:String= pdict.password;//Get the user entered password 
//var hash: String=pdict.hash;
var md:MessageDigest=null ;

var encodedText:String=null;
	try
	{
		 
		
 		var message : String;
 
		 var _httpClient : HTTPClient = new HTTPClient();
		 _httpClient.setTimeout(30000);
		
		
		md= new MessageDigest(MessageDigest.DIGEST_SHA_1) ;
		if(userName!=null && password!=null){
		encodedText= Encoding.toHex(md.digest(null, new Bytes(userName.concat(password,secretKey),"UTF-8"))) ; // encode the text using the salt key and the user entered password
		}
		//compare the encode password with the migrated password
		if (encodedText!=null){	
			var url: String = dw.system.Site.getCurrent().getCustomPreferenceValue("ADLoginServiceURL");
			var reqData:String="username="+userName+"&password="+password+"&hash="+encodedText;
			_httpClient.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			_httpClient.setRequestHeader("Char-Set", "UTF-8");
			_httpClient.open('Post', url);
			_httpClient.setTimeout(10000)
			_httpClient.send(reqData);
 		if (_httpClient.statusCode == 200)
 			{
   				   message = _httpClient.text;
   				   pdict.json=message;
	   			   return PIPELET_NEXT;
 			}
 		
		pdict.authSuccess="false";
		return PIPELET_ERROR;
		} 
		
	}catch (error){
		Logger.error("Password encryption failed "+error);
	}

}
