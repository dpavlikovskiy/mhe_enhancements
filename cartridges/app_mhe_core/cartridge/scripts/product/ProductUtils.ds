importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.campaign );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.web );
importPackage( dw.order);
importPackage( dw.io );
importScript( "int_simplefeed_jfw:email/stringReplace.ds" );
function sanitize(inS : String) {
	return inS.replace(/\W/g,'');
}

function unsanitizeOR( anURL ) {
	return anURL.toString().replace('%7c','|','g');	
}

function ProductUtils(pdict : PipelineDictionary) {
	var _product = Product = pdict.Product || null;
	var _httpMap = dw.web.HttpParameterMap = pdict.CurrentHttpParameterMap;
	var _variationModel = ProductVariationModel = empty(pdict.CurrentVariationModel) ? (_product==null?null:_product.variationModel) : pdict.CurrentVariationModel;
	var _variantHierarchy = null;
	
	var getSimpleProduct = function(item : Product) {		
		var pm = item.isVariant() ? item.masterProduct : item;
		var p = {
			source: _httpMap.source.stringValue,
			start: _httpMap.start.intValue,
			cgid: _httpMap.cgid.stringValue,
			srule: _httpMap.srule.stringValue,
			name: item.name,
			ID: item.ID,
			productSet: item.productSet,
			bundle: item.bundle,
			bundled: item.bundled,
			productSetProduct: item.productSetProduct,
			master: item.isMaster(),
			isOption: item.optionProduct,
			variant: item.isVariant(),
			masterID: pm.ID
		};
		var dct = pdict;
		try {		
			p.variations = getVariationAttributes(item);			
			p.pricing = ProductUtils.getPricing(item);
			p.images = {
				"large": getImages(item, "large"),
				"small": getImages(item, "small"),
			}			
			p.availability = ProductUtils.getAvailability(item, _httpMap.Quantity.stringValue);					
			p.variants = ProductUtils.getVariants(item, _variationModel, _httpMap.Quantity.stringValue);								
		}
		catch (error) {
			p.error = error;
		}
		return p;
	};	
	
	var getVariantHierarchy = function() {
		if (_product==null) { return null; }
		var vh = {};
		if (!_variantHierarchy) {
			_variantHierarchy = ProductUtils.getVariantHierarchy(_product, _variationModel, _httpMap.Quantity.stringValue);
		}
		vh = _variantHierarchy;
		return vh;
	}
	
	var getVariantAvailability = function(current : String, selected : Array) {
		var arr = [], att = null;
				
		var vh = getVariantHierarchy();
		if (selected.length==0) {
			for (att in vh.attributes) {
				if (att.selected) {	break; }
			}
			arr.push(att.id+"-"+att.value);
		}
		else {
			arr = selected;
		}
		if (current) {
			arr.push(current);
		}
		var atts = vh.attributes;
		var attribute = {};
		for (var i=0,len=arr.length;i<len;i++){
			attribute = atts[arr[i]];
			if (!attribute) {
				if (current) { arr.pop(); } 
				 return false;
			}
			if (!attribute.attributes) { break; }
			atts = attribute.attributes;
		}
		if (current) { arr.pop(); }		
		return getAttributeAvailability(attribute);		
	}	
	
	var getAttributeAvailability = function(attribute) {
		var available = false;
		if (attribute.attributes) {
			for (a in attribute.attributes) {
				var att = attribute.attributes[a];				
				var available = getAttributeAvailability(att);
				if (available) { break;}
			}
		}
		else {
			available = attribute.availability.availableForSale;			
		}
		return available;
		
	}	
	
	var getVariationAttributes = function(item) {
		
		var variations = { attributes: [] };
		
		if (!item.isVariant() && !item.isMaster()) {
			return variations;
		}		
			
		// get product variations	
		var pvm :  ProductVariationModel = pdict.CurrentVariationModel ? pdict.CurrentVariationModel: item.variationModel;
		var masterPvm :  ProductVariationModel = item.isVariant() ? item.masterProduct.variationModel : item.variationModel;
		var attIterator = pvm.productVariationAttributes.iterator();
		
		while (attIterator.hasNext()) {
			var v_att = attIterator.next();
			var pva = 	{
				id: v_att.getAttributeID(),
				name: v_att.getDisplayName(),
				vals: []
			};
			
			var attValIterator = pvm.getAllValues(v_att).iterator();					
			while (attValIterator.hasNext()) {
				var v_attVal = attValIterator.next();
				if (!masterPvm.hasOrderableVariants(v_att, v_attVal)) { continue; }
				var pvaVal = {
					id: v_attVal.ID,
					val: v_attVal.displayValue ? v_attVal.displayValue: v_attVal.value
				};
				
				if (pva.id == 'color') {
					// get images for variation
					pvaVal.images = {
						"swatch": {},
						"large": getImages(v_attVal,"large"),
						"small": getImages(v_attVal,"small")
					};
					// get swatch image
					var swatch = v_attVal.getImage('swatch');
					if (!empty(swatch)) {
						// TODO: See if this can be done via json serializer
						pvaVal.images.swatch = {"url":swatch.getURL(),"alt":swatch.alt,"title":swatch.title};						
					}										
				}
				// add the product variation attribute value
				pva.vals.push(pvaVal); 
				
			} /* END pvm.getAllValues(v_att) */
			
			// add the product variation attribute
			variations.attributes.push(pva);	
		} /* END pvm.productVariationAttributes */
		return variations;
	};
	
	var getImages = function(o, viewtype) {
		var imgs = o.getImages(viewtype);
		var imgArray = [];
		for (var i=0,len=imgs.length;i<len;i++) {
			imgArray.push({"url":imgs[i].getURL().toString(),"alt":imgs[i].alt,"title":imgs[i].title});	
		}
		return imgArray;
	}
	
	var appendObjectProperties = function(source, destination) {
		for (var p in source) { destination[p] = source[p];	}	
	};
	
	return {
		getSimpleProduct : getSimpleProduct,
		getImages : getImages,
		getPricing : ProductUtils.getPricing,
		getVariationAttributes : getVariationAttributes,
		isVariantAvailable : getVariantAvailability
	};	
}

ProductUtils.getAvailability = function(item : Product, quantity : Object,chilledStatusCode : Number) {
	var qty = isNaN(quantity) ? 1 : (new Number(quantity)).toFixed();
	/* product availability */
	var avm : ProductAvailabilityModel = item.availabilityModel;
	
	var availability = {
		status:avm.availabilityStatus,
		statusQuantity:qty,
		inStock:avm.inStock,
		ats:empty(avm.inventoryRecord) ? 0 : "maxOrderableQuantity" in item.custom && item.custom.maxOrderableQuantity< avm.inventoryRecord.ATS.value? item.custom.maxOrderableQuantity :avm.inventoryRecord.ATS.value.toFixed(),
		inStockDate:empty(avm.inventoryRecord) || empty(avm.inventoryRecord.inStockDate) ? "" : avm.inventoryRecord.inStockDate.toDateString(),
		availableForSale:avm.availability>0,		 		
		levels : {}
	};
	
	var avmLevels : ProductAvailabilityLevels = avm.getAvailabilityLevels((qty < 1) ? 1 : qty);
	availability.isAvailable = avmLevels.notAvailable.value==0;
	availability.inStockMsg = Resource.msgf('global.quantityinstock','locale',"", avmLevels.inStock.value.toFixed());
	availability.preOrderMsg = Resource.msgf('global.quantitypreorder','locale',"", avmLevels.preorder.value.toFixed());
	availability.backOrderMsg = Resource.msgf('global.quantitybackorder','locale',"", avmLevels.backorder.value.toFixed());
	if (avm && avm.inventoryRecord && !empty(avm.inventoryRecord.inStockDate)) {
		availability.inStockDateMsg = Resource.msgf('global.inStockDate','locale',"", avm.inventoryRecord.inStockDate.toDateString());
	}
	
	availability.levels[dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK] = avmLevels.inStock.value;
	availability.levels[dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER] = avmLevels.preorder.value;
	availability.levels[dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER] = avmLevels.backorder.value;
	availability.levels[dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_NOT_AVAILABLE] = avmLevels.notAvailable.value;
	
	availability.basketChilledDeliveryStatus=chilledStatusCode;
	
	
	return availability;	
}

ProductUtils.getProductJson = function(item : Product, args : PipelineDictionary) : String {
	var pu = new ProductUtils(args);
	var sp = pu.getSimpleProduct(item);
	var json = JSON.stringify(sp); 
	return json;
}

ProductUtils.getPricing = function(item : Product) : String {
	/* product pricing 
	*
	* There is currently no way to check if the list pricebook is actually
	* assigned to the site.  Therefore, we do a sanity check:  If the
	* product has no price according to standard price lookup rules,
	* then we know the list price book is not assigned to the site.
	* (The converse is not true so this check is not perfect.)
	* 
	* Todo:  Improve this logic.
	*/

	var priceModel = item.getPriceModel();
	var standardPrice = null;

	if (!priceModel.getPrice().available) {
		standardPrice = dw.value.Money.NOT_AVAILABLE;
	} else if (('listPriceDefault' in dw.system.Site.current.preferences.custom) && !empty(dw.system.Site.current.preferences.custom.listPriceDefault)) {
		standardPrice = priceModel.getPriceBookPrice(dw.system.Site.current.preferences.custom.listPriceDefault);
	} else {
		standardPrice = priceModel.getPriceBookPrice('list-prices');
	}
	
	var salesPrice = priceModel.getPrice();	
	var showStdPrice = standardPrice.available && salesPrice.available && standardPrice.compareTo(salesPrice) == 1;
	var promoPrice = dw.value.Money.NOT_AVAILABLE;
	var isPromoPrice = false;

	var promos = PromotionMgr.activeCustomerPromotions.getProductPromotions(item);
	if (!(empty(promos))) {	
		var promo = promos[0];	
		var promoClass = promo.getPromotionClass();
		if (promoClass && promoClass.equals(Promotion.PROMOTION_CLASS_PRODUCT)) {
			if (item.optionProduct) {
				promoPrice = (pdict.CurrentOptionModel) ? 
							 promo.getPromotionalPrice(item, pdict.CurrentOptionModel) :
							 promo.getPromotionalPrice(item, item.getOptionModel());
			}
			else {
				promoPrice = promo.getPromotionalPrice(item);
			}
		}
		
		if (promoPrice.available && salesPrice.compareTo(promoPrice) != 0) {
			showStdPrice = isPromoPrice = true;
			standardPrice = salesPrice;
			salesPrice = promoPrice;	
		}
	}

	var pricing = {
		showStandardPrice : showStdPrice,
		isPromoPrice : isPromoPrice,
		standard : standardPrice.value,
		formattedStandard : dw.util.StringUtils.formatMoney(standardPrice),
		sale : salesPrice.value,
		formattedSale : dw.util.StringUtils.formatMoney(salesPrice),		
		salePriceMoney : salesPrice,
		standardPriceMoney : standardPrice,
		quantities : []
	};
	
	var priceTable = priceModel.getPriceTable();
	for (var qty in priceTable.getQuantities()) {		
		pricing.quantities.push({unit:empty(qty.unit) ? "" : qty.unit, value:empty(qty.value) ? 0 : qty.value.toFixed()});
	}	
	
	return 	pricing;
}

ProductUtils.getSimpleBonusProduct = function(item : Product, lineItem : dw.order.ProductLineItem) : String {
	var p = {
		name : item.name,
		ID: item.ID,
		qty : lineItem.quantityValue,
		lineItemCtnrUUID : lineItem.lineItemCtnr.UUID,
		variations : {attributes: []},
		options : {attributes: []}
	};
	
	// if product is variant or master, get selected  attribute definitions
	if (item.isVariant() || item.isMaster()) {						
		var attDefs = item.variationModel.getProductVariationAttributes();
		for (var i=0,len=attDefs.length;i<len;i++) {
			var attDef = attDefs[i]; 
			var selectedValue = item.variationModel.getSelectedValue(attDef);
			// push variation attributes to simple object 
			p.variations.attributes.push({
				displayID: attDef.ID, 
				displayName: attDef.displayName, 
				selectedDisplayValue: selectedValue.displayValue, 
				selectedValue : selectedValue.value});			
		}
	}
	
	// if lineItem or optionProductLineItems is empty, return simple object
	if (empty(lineItem) || empty(lineItem.optionProductLineItems)) {
		return p;
	}
	
	
	// otherwise get option product line items
	var optionLineItems = lineItem.optionProductLineItems;
	for (var i=0, len=optionLineItems.length;i<len;i++) {
		var optionLineItem = optionLineItems[i];
		var option = item.optionModel.getOption(optionLineItem.optionID);
		// push option attributes to simple object
		p.options.attributes.push({
			displayID: optionLineItem.optionID, 
			htmlName: empty(option) ? "" : option.htmlName, 
			selectedDisplayValue: optionLineItem.lineItemText, 
			selectedValue : optionLineItem.optionValueID
		});		
	}
	
	// return simple object
	return p;
}

ProductUtils.getBonusProductJson = function(item : Product, lineItem : dw.order.ProductLineItem) : String {
	var o = { data : ProductUtils.getSimpleBonusProduct(item, lineItem) };
	return JSON.stringify(o);
}

ProductUtils.getSelectedColor = function(product : Product, pvm : ProductVariationModel) {
	if (product==null) { return null; }
	var vm : ProductVariationModel = pvm==null ? product.variationModel : pvm;
	var cvm : ProductVariationModel = product.isVariant() ? product.masterProduct.variationModel : product.variationModel;
						
	var selectedColor = null;				
	var colorVA = vm.getProductVariationAttribute("color");	
	if (colorVA==null) { return null; }
						
	var selectedColor = vm.getSelectedValue(colorVA);						
	
	if (!empty(selectedColor)) {		
		return selectedColor;
	}
	else {
		var variant = product;
		if(!product.isVariant()) {
			if(!empty(vm.defaultVariant)) {
		 		variant = vm.defaultVariant;								 		
		  	} else if(vm.variants.length > 0) {
		  		variant = vm.variants[0];								  		
		  	}			
		}		
		
	 	var cv = vm.getVariationValue(variant, colorVA);
	 	if (!cvm.hasOrderableVariants(colorVA, cv)) {
	 		var found = false;
			for (var i=0,il=vm.variants.length;i<il;i++) {
				cv = cvm.getVariationValue(vm.variants[i], colorVA);
				if (cvm.hasOrderableVariants(colorVA, cv)) {
					found = true;
					break;				
				}
			}
	 	} 
	 	return cv;
	}
}

ProductUtils.getVariantForColor = function(prod : dw.catalog.Product, colorId : String)  {
	var newProduct = prod;
	var variants = prod.getVariants();	
	
	if(variants == null || variants.length == 0) {
		return newProduct;		
	}
		
	for each(var p in variants) {
		if(p.onlineFlag) {
			newProduct = p;
			if(empty(colorId) || p.custom.color == colorId) {
				break;
			}
		}
	}
	return newProduct;
}

ProductUtils.getQueryString = function(map: dw.web.HttpParameterMap, fields : Array) {
	var parms = [];	
	for (var i=0,il=fields.length;i<il;i++) {
		var key = fields[i];
		if (empty(key) || !map.isParameterSubmitted(key)) { continue;	}
		
		var parm : dw.web.HttpParameter = map.get(key);		
		if(empty(parm) || parm.stringValue.length==0) { continue;	}
				
		// only get here if we have a match
		parms.push(sanitize(key)+"="+sanitize(parm.stringValue));
	}
	var qs = parms.length==0 ? "" : parms.join("&"); 
	return 	qs;
}

ProductUtils.isCompareEnabled = function(catId) {	
	var cat = CatalogMgr.getCategory(catId);	
	while (cat != null) {
		if ('enableCompare' in cat.custom && cat.custom.enableCompare) {
			return true;
			break;
		}
		cat = cat.parent;
	}
	return false;
}
ProductUtils.getVariants = function(item : Product, pvm : ProductVariationModel, quantity : Object) {
	var variants = {};
	if (!item.isVariant() && !item.isMaster()) {
		return variants;
	}	
	
	for (var i=0,len=pvm.variants.length;i<len;i++) {
		
		var v : Variant = pvm.variants[i];
		var variant = {
			id : v.ID,
			attributes : {},			
			availability: ProductUtils.getAvailability(v, quantity),
			pricing: ProductUtils.getPricing(v)
		};
		// attributes
		var attKey = [];
		for (var a=0,alen=pvm.productVariationAttributes.length;a<alen;a++) {		
			var att = pvm.productVariationAttributes[a];			
			var variationValue = pvm.getVariationValue(v, att);
			if (empty(variationValue)) { continue; }
			attKey.push(att.ID+"-"+variationValue.value);
			variant.attributes[att.ID] = empty(variationValue.displayValue) ? variationValue.value : variationValue.displayValue;		 
		}
		
		variants[attKey.join("|")]=variant;		
	}
	
	return variants;
}

ProductUtils.getVariantHierarchy = function(item : Product, pvm : ProductVariationModel, quantity : Object) {
	var variants = {};
	if (!item.isVariant() && !item.isMaster()) { return variants; }
		
	for (var i=0,len=pvm.variants.length;i<len;i++) {
		var v = pvm.variants[i];		
		var target = variants;		
		// attributes		
		for (var a=0,alen=pvm.productVariationAttributes.length;a<alen;a++) {					
			var att = pvm.productVariationAttributes[a];
			var variationValue = pvm.getVariationValue(v, att);
			if (empty(variationValue)) { continue; }
			var key = att.ID+"-"+variationValue.value;
			if (!("attributes" in target)) {
				target.attributes = {};
			}
			if (!(key in target.attributes)) {				
				target.attributes[key] = {
					id:att.ID,
					value:variationValue.value,
					display:empty(variationValue.displayValue) ? variationValue.value : variationValue.displayValue,
					selected:pvm.isSelectedAttributeValue(att, variationValue)					
				};				
			}
			target = target.attributes[key];		 
		}
		target.productId = v.ID;
		target.availability = ProductUtils.getAvailability(v, quantity);
		target.pricing = ProductUtils.getPricing(v);
	}
	
	return variants;
};

ProductUtils.getSelectedAttributes = function(pvm : ProductVariationModel) {
	var atts = {},		
		attDefs = pvm.getProductVariationAttributes();	
	
	for (i=0; i<attDefs.length;i++) {
		var attribute = attDefs[i]; 
		var selectedValue = pvm.getSelectedValue(attribute);		
		atts[attribute.ID] = {			
			displayName:attribute.displayName,
			value:selectedValue?selectedValue.value:"",
			displayValue:selectedValue?selectedValue.displayValue:""
		};
	}
	return atts;
};

ProductUtils.getDefaultVariant = function(pvm : ProductVariationModel) {
	var variant = pvm.selectedVariant;
	if (!empty(variant)) { return variant; }
	
	var attDefs = pvm.getProductVariationAttributes();
	var map : dw.util.HashMap = new dw.util.HashMap();	
	
	for (var i=0,len=attDefs.length;i<len;i++) {
		var attribute = attDefs[i]; 
		var selectedValue = pvm.getSelectedValue(attribute);
		if (!empty(selectedValue) && selectedValue.displayValue.length>0) {
			map.put(attribute.ID,selectedValue.ID);
		}
	}
	
	var variants = 	pvm.getVariants(map);
	for (var i=0,len=variants.length;i<len;i++) {
		var p : Variant = variants[i];
		if (p.onlineFlag && p.availabilityModel.availability>0) {
			return p;
		}
	}
	return null;
};

/** 
	Get the Badge Image From BM 
*/
ProductUtils.getBadgeImage = function(badgeName : String) : String{
	var badgeURL : URL = null;
	var badgeSitePrefName : String = "badgeType" + badgeName;
	var mediaFile : dw.content.MediaFile = dw.system.Site.getCurrent().getCustomPreferenceValue(badgeSitePrefName);
	if (mediaFile!=null && !empty(mediaFile)) {
		badgeURL = mediaFile.URL;
	}
	return badgeURL;
};

/**
	Get value from Site Preference on the basis of key provided	
*/
ProductUtils.getValueFromSitePrefEnum = function(sitePrefName : String, key : String) : String{
	var sitePreferenceArray : Array = dw.system.Site.getCurrent().getCustomPreferenceValue(sitePrefName);
	var sitePrefVal : String = "";
	for (var i=0; i < sitePreferenceArray.length; i++) {
		if (key.equalsIgnoreCase(sitePreferenceArray[i].getValue())) {
			sitePrefVal = sitePreferenceArray[i].getDisplayValue();
			break;
		}
	}
	if (sitePrefVal == null || empty (sitePrefVal)){
		sitePrefVal = "";
	}
	return sitePrefVal;
};

/**
	Get value from Site Preference on the basis of key provided	 for invoice
*/
ProductUtils.getValueFromSitePrefEnumForInvoice = function(sitePrefName : String, key : String) : String{
	var sitePreferenceArray : Array = dw.system.Site.getCurrent().getCustomPreferenceValue(sitePrefName);
	var sitePrefVal : String = "";
	var numberRegex : String ="[a-zA-Z]";
	var regexPattern : RegExp=new RegExp(numberRegex);
	var indexofFirstAlphabet:Number= key.search(regexPattern);
	var invoiceKey:String=key;
	if(indexofFirstAlphabet!=-1){	
		invoiceKey=key.slice(0,indexofFirstAlphabet);
	}
	for (var i=0; i < sitePreferenceArray.length; i++) {
		if (invoiceKey.equalsIgnoreCase(sitePreferenceArray[i].getValue())) {
			sitePrefVal = sitePreferenceArray[i].getDisplayValue();
			break;
		}
	}
	if (sitePrefVal == null || empty (sitePrefVal)){
		sitePrefVal = "";
	}
	return sitePrefVal;
};

/**
	Set if the badge needs to be displayed or not
*/	
	
ProductUtils.displayBadge = function(product : dw.catalog.Product) : Boolean {
	var ifBadge : Boolean = false;
		if (!empty(product.custom.badge.value)){
			var startDate : dw.util.Calendar = null;
			var endDate : dw.util.Calendar = null;
			var today : dw.util.Calendar = new dw.util.Calendar();

			if (!empty(product.custom.badgeStartDate)){
				startDate = new dw.util.Calendar(product.custom.badgeStartDate);
			}
			if (!empty(product.custom.badgeEndDate)){
				endDate = new dw.util.Calendar(product.custom.badgeEndDate);
			}
			if (empty(startDate) || startDate.compareTo(today) <= 0 ){
				if (empty(endDate) || endDate.compareTo(today) >= 0 ){
					ifBadge = true;
				}
			}
		}
	return ifBadge;
};

 /**
	get the current searched category of the product
*/	
	
ProductUtils.getProductCategoryForPDP = function(ProductSearchResult : dw.catalog.ProductSearchModel, Product : dw.catalog.Product) : dw.catalog.Category{
	
	var category : Category = null;		
	// get category from search context
	if( !empty(ProductSearchResult) )
	{
		category = ProductSearchResult.category;
	}
	
	if( category == null )
	{
		// get category from products primary category
		category = Product.primaryCategory;

		// get category from product master if not set at variant
		if( category == null && Product.variant )
		{
			category = Product.masterProduct.primaryCategory;
		}
	}
	return category;
};

		
			 /**
	get the current searched category of the product
*/	
	
ProductUtils.getProductCategoryForStaticPDP = function(ProductSearchResult : dw.catalog.ProductSearchModel, Product : dw.catalog.Product) : dw.catalog.Category{
	
	var category : Category = null;		
	// get category from search context
	if( !empty(ProductSearchResult) )
	{
		category = ProductSearchResult.category;
	}
	
	if( category == null )
	{
		// get category from products primary category
		for (var i=0;i<Product.categories.length;i++){
		if (Product.categories[i].custom.isStatic){
			category=Product.categories[i];
			break;
		}
		}
	

		// get category from product master if not set at variant
		if( category == null && Product.variant )
		{
		for (var i=0;i<Product.variant.categories.length;i++){
		if (Product.variant.categories[i].custom.isStatic){
			category=Product.variant.categories[i];
			break;
		}
		}
			if( category == null) {
				category = Product.masterProduct.primaryCategory;
			}
		}
	}
	return category;
};
 /**
	get the current searched prodcut from the Prodcut searh model
*/	
	
ProductUtils.getProductOfArticle = function(ProductSearchResult : dw.catalog.ProductSearchModel) : dw.catalog.Product {
	
	var product : Product = null;		
	var products : Iterator = null;		
	// get product from search context
	if( !empty(ProductSearchResult) )
	{
		products = ProductSearchResult.products;
	}
	
	if( products != null )
	{
		while (products.hasNext()) {
			// get product from products iterator
			product = products.next();
	
		}
	}
	return product;
};

ProductUtils.getRootCategory = function(Product : dw.catalog.Product) : dw.catalog.Category{
	
	if (Product.variant){
		Product = Product.masterProduct;
	}
	/* Get Top Level category, to create the key for getting Serving and Volume Info */
	var rootCategory : dw.catalog.Category = Product.primaryCategory;
	if(!empty(rootCategory)){
	while( rootCategory.parent.ID != "root")
	{
		rootCategory = rootCategory.parent;
	}
	}
	return rootCategory;
};

ProductUtils.getClassNameForSize = function(sizeValue : String) : String{
	
	var className : String=null;
	if(sizeValue!=null)
	{  
	   className = ProductUtils.getValueFromSitePrefEnum("classNameforSize",StringUtils.trim(sizeValue));
	}
	return className;
};
    
ProductUtils.getMaxOrderableQuantity = function(product : Product, invFlag:Boolean) : Number {
	 
	 var avm : ProductAvailabilityModel= product.availabilityModel;
		var availableCount : Number = 0;
	    if(!invFlag){
		  if (avm.availability>0 && !empty(avm.inventoryRecord)) {						
			 availableCount=calcQuantity(avm,product,availableCount);
		 }
		}else{
			availableCount = 1;
		    if (!empty(avm.inventoryRecord)){
			 if (avm.availability==0) {
				availableCount = 0;
			 }else{
			   availableCount=calcQuantity(avm,product,availableCount);
		    }
		  }
	 }
	 if(empty(avm.inventoryRecord)&&product.bundle){
	 	availableCount=calculateBundleProductInventoryCount(product);
		
		}
	return 	availableCount;
};
 
 
 function calculateBundleProductInventoryCount(product : Product):Number {
 	var bundleProducts: Collection= product.getBundledProducts();
 	var bundleProductsIterator : Iterator= bundleProducts.iterator();
 	var  invFlag:Boolean=dw.catalog.ProductInventoryMgr.getInventoryList().getDefaultInStockFlag();
 	var bundleProduct : Product=null;
 	var count : Number=0;
 	 var avm : ProductAvailabilityModel= product.availabilityModel;
 	var avmLevels : ProductAvailabilityLevels = null;
 	  while(bundleProductsIterator.hasNext()) {
 	  	bundleProduct=bundleProductsIterator.next();
 	  	var qty:Number=ProductUtils.getMaxOrderableQuantity(bundleProduct, invFlag);
 	  	if(count==0||count>qty){
 	  	count=qty;
 	  	}
 		avmLevels = avm.getAvailabilityLevels(count);
 		if(avmLevels.inStock.value<count){
 	 	 count=avmLevels.inStock.value;
 	 	 }
 	  }
 	
 	  return count;
 };
function calcQuantity(avm: ProductAvailabilityModel,product : Product,availableCount:Number) : Number{
    
    var availableCount : Number = 0;
    
	if (avm.inventoryRecord != null && !empty(avm.inventoryRecord)){    
		availableCount = avm.inventoryRecord.perpetual ? 999 : empty(avm.inventoryRecord) ? 0 : avm.inventoryRecord.ATS.value;			
	}
	
	if(empty(avm.inventoryRecord)&&product.bundle){
	availableCount=calculateBundleProductInventoryCount(product);
	}
	
	if (!empty( product.custom.maxOrderableQuantity)){
		availableCount = (availableCount > product.custom.maxOrderableQuantity) ? product.custom.maxOrderableQuantity : availableCount;
	} else if (product.variant && !empty( product.masterProduct.custom.maxOrderableQuantity)){ 
		availableCount = (availableCount > product.masterProduct.custom.maxOrderableQuantity) ? product.masterProduct.custom.maxOrderableQuantity : availableCount;
	}
	
	return availableCount;
}

ProductUtils.getAvailibilityMsg = function(product : Product, invFlag:Boolean) : String {
	
	var avm: ProductAvailabilityModel = product.availabilityModel;
	var availableCount : Number = 0;
	var orderableCount : Number = 0; 
	var msgToDisplay : String = "";	
	
	 if(empty(avm.inventoryRecord)&&product.bundle){
	 	availableCount=calculateBundleProductInventoryCount(product);
		}
	
	if (avm.inventoryRecord != null && !empty(avm.inventoryRecord)){
		availableCount = avm.inventoryRecord.perpetual ? 999 : empty(avm.inventoryRecord) ? 0 : avm.inventoryRecord.ATS.value;
	}
	if (!empty( product.custom.maxOrderableQuantity)){
		orderableCount = product.custom.maxOrderableQuantity ? product.custom.maxOrderableQuantity : availableCount;
	} else if (product.variant && !empty( product.masterProduct.custom.maxOrderableQuantity)){
		orderableCount = product.masterProduct.custom.maxOrderableQuantity ? product.masterProduct.custom.maxOrderableQuantity : availableCount;
	}
	
	if (product.master) return msgToDisplay;	
	msgToDisplay = (availableCount < orderableCount) ? Resource.msgf("product.available.msg", "product", null, availableCount) : Resource.msgf("product.maxorderable.msg", "product", null, orderableCount); //Site.getCurrent().getPreferences().getCustom()["msgForMoreThanAllowedPurchase"]; 
	if (orderableCount == 0){
		msgToDisplay = Resource.msgf("product.available.msg", "product", null, availableCount);
	}
	return 	msgToDisplay;	
};
 
/**
	Calculate Per Liter Price of the product	
*/
ProductUtils.getPerLiterPrice = function(unit: String, caseSize : String, size : String,price : Number) : Number{
	 var perLiterPrice : Number = 0;
	 var caseSize : Number = !empty(caseSize)? Number(caseSize) : 1;
	 var size : Number = !empty(size)? Number(size) : 1;
	 if(caseSize<1)
	 {
	 	caseSize=1;
	 }
	 if(unit=='CA')
	 {
	 	perLiterPrice = price*100/(size*caseSize);
	 }
	 else
	 {
	 	perLiterPrice = price*100/(size);
	 }
	
	
	return perLiterPrice;
};



ProductUtils.getPerUnitPrice = function(caseSize : String,price : Number) : Number{
	 var perUnitPrice : Number = 0;
	 var caseSize : Number = !empty(caseSize)? Number(caseSize) : 1;
	 
	 if(caseSize<1)
	 {
	 	perUnitPrice = price;
	 }
	 else
	 {
	 	perUnitPrice = price/caseSize;
	 }
	
	return perUnitPrice;
};


/* Return chilled delivery staus code  
-1 Enpty basket,
0  Basket having non chilled product, 
1  Basket having chilled product
*/
ProductUtils.getChilldDeliveryStatus = function(basket : Basket) : Number{
	var statusCode : Number = 0;
 	var chilledDeliveryStatus:Boolean = false;
	var basketsize:Number=0;
	if(!empty(basket)){
	   var pliList : dw.util.List = new dw.util.ArrayList(basket.getProductLineItems());
	       basketsize=pliList.size();
	   var listItr : Iterator = pliList.iterator();
		while (listItr.hasNext()){
		  var pli: dw.order.ProductLineItem = listItr.next();
		  if(pli.custom.chilledDeliveryService == true){
		      chilledDeliveryStatus=true;
		      break;
		  }
	    }
	 }
	if(basketsize == 0){
		statusCode=-1;
	}else if(basketsize >0 && !chilledDeliveryStatus){
		statusCode=0;
	}else if(basketsize >0 && chilledDeliveryStatus){
		statusCode=1;
	}
	return statusCode;
};

 
 
 ProductUtils.getTimeFromDate = function(date : String) : String{
	 
	var TwittetDate:Calendar = new Calendar(new Date(date));
    var CurrDate:Calendar = new Calendar(new Date());
    var nnum:Number=CurrDate.getTime().valueOf();
    var durDiff:Number=CurrDate.getTime().valueOf() - TwittetDate.getTime().valueOf();
     
    var days:Number=durDiff/(24*60*60*1000);
    var hours:Number=durDiff/(60*60*1000);
    var minute:Number=durDiff/(60*1000);
    var agotime:Number=0;
    if(days >=1 ){
       agotime= Math.floor(days) +" Days ago";
    }else if(hours >= 1){
       agotime= Math.floor(hours) +" Hours ago";
    }else if(minute >= 0){
       agotime=Math.floor(minute) +" Minute ago";
    } 
    return agotime;
};
 
 
  
 ProductUtils.getSlotBody = function(body : String) : String{

       var jsonStr:String=null;
       var fileName:String=dw.system.Site.current.ID+"Tweets.text";
       var fileNameWithPath : String =File.IMPEX + File.SEPARATOR + "src" + File.SEPARATOR + "socialfeed"+ File.SEPARATOR+"twitter" + File.SEPARATOR + fileName;
	   var fileout : File = new File(fileNameWithPath);
	   if(fileout.exists()){
          jsonStr = new FileReader(fileout).getString();
	   } else {
	   	 return "";
	   }
	   var isFound : Boolean = false;
	   var jsonObj=JSON.parse(jsonStr);
	   try{
	    var x:Number=jsonObj.tweets.length;
	    var regExp : RegExp = null;
		for(var i:Number=0;i<x ;i++) {
			var item:JSON = jsonObj.tweets[i];
			    body=replaceAll(body,new RegExp("<&tweet"+(i+1)+"&>"),item.text);
		   	    body=replaceAll(body, new RegExp("<&user"+(i+1)+"&>"),item.user);
		   	    body=replaceAll(body, new RegExp("<&time"+(i+1)+"&>"),item.time);
		   	    if (!empty(item.text) && body.indexOf("<&tweet"+(i+1)+"&>")>-1)
				{
					isFound = true;
					break;
				}
		   }
		  if (isFound) {
		  	return "";
		  }
		  
		}catch(e){
		 var ee:String=e.message;
		}
		
	  
    return body;
};


 ProductUtils.getVariantCountWithConcretePrice = function(product : Product) : Number{
	var count: Number=0;
	var PVM:ProductVariationModel=product.variationModel;		
	if(product.master){
			var pdct:Product=null;
			var iterator: Iterator=PVM.variants.iterator();
			while(iterator.hasNext()){
			pdct=iterator.next();
			if(pdct.priceModel.price.value!=0){
				count++;
			}
		}
	}
	else{
		count=-1;
	}
	return count;
};
 
ProductUtils.getVariantIDWithConcretePrice = function(product : Product) : String{
	var count: Number=0;
	var returnProduct:Product=null;
	var PVM:ProductVariationModel=product.variationModel;		
	if(product.master){
			var pdct:Product=null;
			var iterator: Iterator=PVM.variants.iterator();
			while(iterator.hasNext()){
			pdct=iterator.next();
			if(pdct.priceModel.price.value!=0){
				count++;
				returnProduct=pdct;
				break;
			}
		}
	}
	if(count>1){
		returnProduct=null;
	}
	if(returnProduct!=null){
		return returnProduct.ID;
	}
	else{
		return null;
	}
}; 

ProductUtils.getVariantIndexWithConcretePrice = function(product : Product) : Number{
	var index: Number=-1;
	var returnProduct:Product=null;
	var PVM:ProductVariationModel=product.variationModel;		
	if(product.master){
			var pdct:Product=null;
			var iterator: Iterator=PVM.variants.iterator();
			while(iterator.hasNext()){	
			pdct=iterator.next();
			index++;
			if(pdct.priceModel.price.value!=0){
				break;
			}
		}
	}
	return index;
};  