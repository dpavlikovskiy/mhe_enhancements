/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Product : dw.catalog.Product
*   @input Basket : dw.order.Basket
*   @input AccessoryQuantityToAdd : Number required only for Accessory
*   @input AccessoryParentPosition : String required only for Accessory
*   @output HasOption : Boolean
*	@output CurrentPLI : dw.order.ProductLineItem
*	@output CustomPosition : Number
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.catalog );
importPackage( dw.util );
importPackage( dw.web );

importScript("cart/CartUtils.ds");

function execute( pdict : PipelineDictionary ) : Number
{
	//Input
	var product : Product = pdict.Product;
	var basket : Basket = pdict.Basket;
	//Output
	var isValidOption : Boolean = false;
	var currentPLI : ProductLineItem = null;
	var isAccessory : Boolean = false;
	
	//If it is a valid Option Product, set the custom position and exit to continue for AddToCart
	if (isValidOptionSelected(pdict.CurrentHttpParameterMap)){		
		isValidOption = true;
		
		
		//Check if option value exist in site preferance update same PLI.
		 var optionProductPLI : Array = dw.system.Site.getCurrent().preferences.custom.OptionProductPLI;
	     var alist:ArrayList =new ArrayList();
	     for (var i=0; i < optionProductPLI.length; i++) {
	       alist.add(optionProductPLI[i]);
	     }
		if(alist.contains(getOptionAttributeName(pdict.CurrentHttpParameterMap))){		
		//Get the List of PLIs for the Product
		var pliList : ArrayList = basket.getProductLineItems(product.ID);
	   	var pliIterator : Iterator = pliList.iterator();
		//Iterate the List
		while (pliIterator.hasNext()) {
			var pli : ProductLineItem = pliIterator.next();
			//if current PLI is  an Option Product, Add the qty in the pli and return this pli as the currentPLI
			if (pli.optionProductLineItems.length > 0 ){
				    //Check if the product is an accessory
					pli = updatePLI_Quantity(pli, pdict.CurrentHttpParameterMap.Quantity.doubleValue);
					currentPLI = pli;
					break;
				}
			}		
		  }		
	  
	//Check if the new PLI is needed, or the qty needs be increased in existing PLI
	} else {
		//Get the List of PLIs for the Product
		var pliList : ArrayList = basket.getProductLineItems(product.ID);
	   	var pliIterator : Iterator = pliList.iterator();
		if (pdict.AccessoryParentPosition != null){
			isAccessory =  true;
		}	
		//Iterate the List
		while (pliIterator.hasNext()) {
			var pli : ProductLineItem = pliIterator.next();
			//if current PLI is not an Option Product, Add the qty in the pli and return this pli as the currentPLI
			if (pli.optionProductLineItems.length <=0 ){
				//Check if the product is an accessory
				if (isAccessory) {
					var pliPosition : String = pli.custom.associatedParentPosition;
					if (pdict.AccessoryParentPosition.equalsIgnoreCase(pliPosition)){
						pli = updatePLI_Quantity(pli, pdict.AccessoryQuantityToAdd);
						//In case of accessosry the system position will be changed in the pipeline						
						currentPLI = pli;
						break;
					}
				//Add the normal Product
				} else {
					pli = updatePLI_Quantity(pli, pdict.CurrentHttpParameterMap.Quantity.doubleValue);
					pli.setPosition(CartUtils.getNextSystemPositionForPLI(basket));
					currentPLI = pli;
					break;
				}				
			}
		}
	}   	
   	
   	//Set the Output in pdict
   	pdict.HasOption = isValidOption;
   	pdict.CurrentPLI = currentPLI;
   	pdict.CustomPosition = CartUtils.getNextCustomPositionForPLI(basket);
   	   	
   	return PIPELET_NEXT;
}

// Check if the correct option value is selected and the product qualifies to be a product with option selected.
function isValidOptionSelected (paramMap : HttpParameterMap) : Boolean {
	var optionParamMap : HttpParameterMap = paramMap.getParameterMap("dwopt_");
	if (optionParamMap != null && optionParamMap.parameterCount > 0) {
		//var optionValue : String = optionParamMap[1].value;
		//'engraving' is the id of option product's option with price; 'none' is the id of option 
		//if (optionValue.equalsIgnoreCase("engraving")){
		
		var hashset:Set=optionParamMap.getParameterNames();
		var hashsetItr : Iterator = hashset.iterator();
		while (hashsetItr.hasNext()){
	     var val:String=hashsetItr.next().toString();
	     var optionValue : String = optionParamMap.get(val).stringValue;
	     if(optionValue.toString().equals("none")){
	       return false;
	     }else{ 
	     	return true;
	     }
	  }
	}
	return false;
	
}

// Check if the correct option value is selected and the product qualifies to be a product with option selected.
function getOptionAttributeName(paramMap : HttpParameterMap) : Boolean {
	var optionParamMap : HttpParameterMap = paramMap.getParameterMap("dwopt_");
	if (optionParamMap != null && optionParamMap.parameterCount > 0) {
		var hashset:Set=optionParamMap.getParameterNames();
		var hashsetItr : Iterator = hashset.iterator();
		while (hashsetItr.hasNext()){
	     var val:String=hashsetItr.next().toString();
	     var optionValue : String = optionParamMap.get(val).stringValue;
		 return optionValue;
	   }
	}
	return "";
}
function updatePLI_Quantity (pli : ProductLineItem, qtyToAdd : Number) :  ProductLineItem {
	var existingQty : Number = pli.getQuantityValue();	 
	pli.setQuantityValue(existingQty + qtyToAdd);
	return pli;
}