/**
 * CalculateCart.ds
 *
 * This script implements a typical shopping cart calculation algorithm.
 * The script is provided with the Demandware reference application. Some
 * parts of the calculation script are specific to the reference application
 * logic and might not be applicable to our customer's storefront applications.
 * However, the shopping cart calculation script can be customized to meet
 * specific needs and requirements.
 *
 * The script implements a complete recaculation of the shopping cart. This
 * includes the following steps:
 * - determine the prices of products contained in the cart
 * - determine the shipping cost for the shipments of the cart
 * - determine the tax rates of all line items of the cart
 * - determine and apply all types of promotions
 * - calculate the totals of shipments as well as the cart
 *
 * The script also handles gift certificate line items. In particular,
 * gift certificates are:
 * - not being taxed
 * - are not count towards order-level promotions
 * - are not count towards order-level shipping cost
 *
 * The script uses the shipping address associated with a shipment to determine 
 * the tax jurisidiction. If no shipping address is available, the default tax 
 * jurisdiction is used.
 *
 * Shipping cost for a shipment are calculated if a shipping method is assigned
 * to the shipment. If no shipping method is assigned to a shipment, shipping
 * is not calculated and set to N/A.
 *
 * @input  Basket : dw.order.Basket
 * @output  taxRate : Number
 */


 importPackage( dw.system );
 importPackage( dw.web );
 importPackage( dw.value );
 importPackage( dw.util );
 importPackage( dw.order );
 importPackage( dw.campaign );
 importPackage( dw.catalog );
 importPackage( dw.customer );


/**
 * Function: execute
 *
 * Main function of the calculation script.
 */
function execute( pdict : PipelineDictionary ) : Number
{
    // ===================================================
	// =====     	PROCESS INPUT PARAMETERS 		 =====
    // ===================================================

	var basket : Basket = pdict.Basket;
	

    // ===================================================
	// =====  PreOrder Product Availability   =====
    // ===================================================

	SetPreOrderProductAvailability(basket);
   
 // ===================================================
	// =====   Engraved Product Availability   =====
    // ===================================================

	SetEngravedProductAvailability(basket);
    // ===================================================
	// =====   CALCULATE PRODUCT LINE ITEM PRICES    =====
    // ===================================================

	calculateProductPrices(basket);
	
    // ===================================================
	// =====    CALCULATE GIFT CERTIFICATE PRICES    =====
    // ===================================================

	calculateGiftCertificatePrices(basket);
	
    // ===================================================
	// =====   Note: Promotions must be applied      =====
	// =====   after the tax calculation for         =====
	// =====   storefronts based on GROSS prices     =====
    // ===================================================
	
    // ===================================================
	// =====   APPLY PROMOTION DISCOUNTS			 =====
	// =====   Apply product and order promotions.   =====
	// =====   Must be done before shipping 		 =====
	// =====   calculation. 					     =====
    // ===================================================

	PromotionMgr.applyDiscounts(pdict.Basket);

    // ===================================================
	// =====        CALCULATE SHIPPING COSTS         =====
    // ===================================================

	// apply product specific shipping costs
	// and calculate total shipping costs
	ShippingMgr.applyShippingCost(basket);
	
    // ===================================================
	// =====   APPLY PROMOTION DISCOUNTS			 =====
	// =====   Apply product and order and 			 =====
	// =====   shipping promotions.                  =====
    // ===================================================

	PromotionMgr.applyDiscounts(pdict.Basket);

	// since we might have bonus product line items, we need to
	// reset product prices
	calculateProductPrices(basket);

    // ===================================================
	// =====         CALCULATE TAX                   =====
    // ===================================================

	var taxRate = calculateTax(basket);

    // ===================================================
	// =====         CALCULATE BASKET TOTALS         =====
    // ===================================================
	
	basket.updateTotals();

    // ===================================================
	// =====            DONE                         =====
    // ===================================================
	pdict.taxRate=Math.round(taxRate *100);
    return PIPELET_NEXT;
}


/**
 * FUNCTION: calculateProductPrices
 *
 * Calculates product prices based on line item quantities. Set calculates prices
 * on the product line items.
 */
function calculateProductPrices(basket : Basket)
{
	// get total quantities for all products contained in the basket
	var productQuantities : HashMap = basket.getProductQuantities();
	
	// get product prices for the accumulated product quantities
	var products : Iterator = productQuantities.keySet().iterator();
	var productPrices : HashMap = new HashMap();
	var categoriesProd : Collection = null;
	// setting the static offer category ID if the added product is of Static offer category
	if (!(basket.customer.authenticated) && 'catID' in session.custom ) {
		basket.custom.staticOfferCategory = session.custom.catID;	
		}
	while(products.hasNext())
	{
		var product : Product = products.next();
		var quantity : Quantity = productQuantities.get(product);
		productPrices.put(product, product.priceModel.getPrice(quantity));
	}
	
	// iterate all product line items of the basket and set prices
	var productLineItems : Iterator = basket.getAllProductLineItems().iterator();
	while(productLineItems.hasNext())
	{
		var productLineItem : ProductLineItem = productLineItems.next();
		
		// handle non-catalog products
		if(!productLineItem.catalogProduct)
		{
			productLineItem.setPriceValue(productLineItem.basePrice.valueOrNull);
			continue;
		}
		
		var product : Product = productLineItem.product;

		// handle option line items
		if(productLineItem.optionProductLineItem)
		{
			// for bonus option line items, we do not update the price
			// the price is set to 0.0 by the promotion engine
			if(!productLineItem.bonusProductLineItem)
			{
				productLineItem.updateOptionPrice();
			}
		}
		// handle bundle line items, but only if they're not a bonus
		else if(productLineItem.bundledProductLineItem)
		{
			// no price is set for bundled product line items
		}
		// handle bonus line items
		// the promotion engine set the price of a bonus product to 0.0
		// we update this price here to the actual product price just to
		// provide the total customer savings in the storefront
		// we have to update the product price as well as the bonus adjustment
		else if(productLineItem.bonusProductLineItem && product != null)
		{
			var price : Money = product.priceModel.price;
			productLineItem.setPriceValue(price.value);
			// get the product quantity
			var quantity : Quantity = productLineItem.quantity;
			// we assume that a bonus line item has only one price adjustment
			var adjustments : Collection = productLineItem.priceAdjustments;
			if(!adjustments.isEmpty())
			{
				var adjustment : PriceAdjustment = adjustments.iterator().next();
				var adjustmentPrice : Money = price.multiply(quantity.value).multiply(-1.0);
				adjustment.setPriceValue(adjustmentPrice.value);
			}
		}			
		
		// set the product price. Updates the 'basePrice' of the product line item,
		// and either the 'netPrice' or the 'grossPrice' based on the current taxation
		// policy
		
		// handle product line items unrelated to product
		else if(product == null)
		{
			productLineItem.setPriceValue(null);				
		}
		// handle normal product line items
		else
		{
			productLineItem.setPriceValue(productPrices.get(product).valueOrNull);
		}
    }
}

/**
 * FUNCTION: calculateGiftCertificates
 *
 * Function sets either the net or gross price attribute of all gift certificate
 * line items of the basket by using the gift certificate base price.
 */
function calculateGiftCertificatePrices(basket : Basket)
{
	var giftCertificates : Iterator = basket.getGiftCertificateLineItems().iterator();
	while(giftCertificates.hasNext())
	{
		var giftCertificate : GiftCertificateLineItem = giftCertificates.next();
		giftCertificate.setPriceValue(giftCertificate.basePrice.valueOrNull);
	}
}	


/**
 * FUNCTION: calculateTax <p>
 *
 * Determines tax rates for all line items of the basket. Uses the shipping addresses
 * associated with the basket shipments to determine the appropriate tax jurisdiction. 
 * Uses the tax class assigned to products and shipping methods to lookup tax rates. <p>
 *
 * Sets the tax-related fields of the line items. <p>
 *
 * Handles gift certificates, which aren't taxable. <p>
 *
 * Note that the function implements a fallback to the default tax jurisdiction
 * if no other jurisdiction matches the specified shipping location/shipping address.<p>
 *
 * Note that the function implements a fallback to the default tax class if a
 * product or a shipping method does explicitely define a tax class.
 */
function calculateTax(basket : Basket) : Number
{  
	var taxRate : Number=null;
	var shipments : Iterator = basket.getShipments().iterator();
	while(shipments.hasNext())
	{
		var shipment : Shipment = shipments.next();

		// first we reset all tax fields of all the line items
		// of the shipment
		var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();
		while(shipmentLineItems.hasNext())
		{
			var lineItem : LineItem = shipmentLineItems.next();
			// do not touch tax rate for fix rate items
			if(lineItem.taxClassID == TaxMgr.customRateTaxClassID)
			{
				lineItem.updateTax(lineItem.taxRate);
			}
			else
			{
				lineItem.updateTax(null);
			}
		}
		
		// identify the appropriate tax jurisdiction
		var taxJurisdictionID : String = null;
		
		// if we have a shipping address, we can determine a tax jurisdiction for it
		if(shipment.shippingAddress != null)
		{
			var location : ShippingLocation = new ShippingLocation(shipment.shippingAddress);
			taxJurisdictionID = TaxMgr.getTaxJurisdictionID(location);
		}
		
		if(taxJurisdictionID == null)
		{
			taxJurisdictionID = TaxMgr.defaultTaxJurisdictionID;
		}
		
		// if we have no tax jurisdiction, we cannot calculate tax
		if(taxJurisdictionID == null)
		{
			continue;
		}

		// shipping address and tax juridisction are available
		var shipmentLineItems : Iterator = shipment.getAllLineItems().iterator();
		while(shipmentLineItems.hasNext())
		{
			var lineItem : LineItem = shipmentLineItems.next();
			var taxClassID : String = lineItem.taxClassID;
			
			Logger.debug("1. Line Item {0} with Tax Class {1} and Tax Rate {2}", lineItem.lineItemText, lineItem.taxClassID, lineItem.taxRate);
			
			// do not touch line items with fix tax rate
			if(taxClassID == TaxMgr.customRateTaxClassID)
			{
				continue;
			}

			// line item does not define a valid tax class; let's fall back to default tax class
			if(taxClassID == null)
			{
				taxClassID = TaxMgr.defaultTaxClassID;
			}

			// if we have no tax class, we cannot calculate tax
			if(taxClassID == null)
			{
				Logger.debug("Line Item {0} has invalid Tax Class {1}", lineItem.lineItemText, lineItem.taxClassID);
				continue;
			}	
		
			// get the tax rate
	         taxRate  = TaxMgr.getTaxRate(taxClassID, taxJurisdictionID);
			// w/o a valid tax rate, we cannot calculate tax for the line item
			if(taxRate == null)
			{
				continue;
			}				
	
			// calculate the tax of the line item	
            lineItem.updateTax(taxRate);
            Logger.debug("2. Line Item {0} with Tax Class {1} and Tax Rate {2}", lineItem.lineItemText, lineItem.taxClassID, lineItem.taxRate);
        }
	}
	
	// besides shipment line items, we need to calculate tax for possible order-level price adjustments
    // this includes order-level shipping price adjustments
    if(!basket.getPriceAdjustments().empty || !basket.getShippingPriceAdjustments().empty)
    {
        // calculate a mix tax rate from
        var basketPriceAdjustmentsTaxRate : Number = (basket.getMerchandizeTotalGrossPrice().value / basket.getMerchandizeTotalNetPrice().value) - 1; 	
	        	
	    var basketPriceAdjustments : Iterator = basket.getPriceAdjustments().iterator();
	    while(basketPriceAdjustments.hasNext())
	    {
			var basketPriceAdjustment : PriceAdjustment = basketPriceAdjustments.next();
			basketPriceAdjustment.updateTax(basketPriceAdjustmentsTaxRate);        	
	    }

	    var basketShippingPriceAdjustments : Iterator = basket.getShippingPriceAdjustments().iterator();
	    while(basketShippingPriceAdjustments.hasNext())
	    {
			var basketShippingPriceAdjustment : PriceAdjustment = basketShippingPriceAdjustments.next();
			basketShippingPriceAdjustment.updateTax(basketPriceAdjustmentsTaxRate);        	
	    }
	}
	return taxRate;
}

function SetPreOrderProductAvailability(basket : Basket)
{
 	basket.custom.preOrderProductAvailability=0;
 	basket.custom.preOrderProductLaunchDate=null;
    var pliList : dw.util.List = new dw.util.ArrayList(basket.getProductLineItems());
    var sz:Number=pliList.size();
	var listItr : Iterator = pliList.iterator();
	while (listItr.hasNext()){
		   var pli : ProductLineItem = listItr.next();
		   if(pli.getProduct()!=null){
		  	var svl:String=pli.getProduct().availabilityModel.availabilityStatus ;
			if(pli.getProduct().availabilityModel.availabilityStatus == dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER){
				basket.custom.preOrderProductAvailability=basket.custom.preOrderProductAvailability+ pli.quantity;
				var instockDate:Date = pli.product.custom.estimatedDeliveryDate;
				if(basket.custom.preOrderProductLaunchDate==null){
					basket.custom.preOrderProductLaunchDate=instockDate;
				}else{
				var oldDate:Calendar = new Calendar(new Date(basket.custom.preOrderProductLaunchDate));	//   Last product Date
			    var old:Date =oldDate.getTime();
			 	var nwd:Date =instockDate.getTime() ;
			    if(nwd>old){
			        basket.custom.preOrderProductLaunchDate=instockDate;
			    }	
		 	}
	 	}}
	}
}



function SetEngravedProductAvailability(basket : Basket)
{
	 var categoryID: String=null;
	var category:Category=null;
 	basket.custom.engravedProductAvailability=false;
 	basket.custom.chilledDeliveryProductAvailability=false;
    var pliList : dw.util.List = new dw.util.ArrayList(basket.getProductLineItems());
    var sz:Number=pliList.size();
	var listItr : Iterator = pliList.iterator();
	 if('catID' in session.custom){
			categoryID = session.custom.catID;		
		}
		if(categoryID != null && categoryID.length>1){
			category=CatalogMgr.getCategory(categoryID);
			if ("enableChilledDelivery" in category.custom && category.custom.enableChilledDelivery){
			 
			  basket.custom.chilledDeliveryProductAvailability=true;
		  }
			
			}
		
	while (listItr.hasNext()){
		  var pli : ProductLineItem = listItr.next();
		  if(pli.custom.chilledDeliveryService){
		      basket.custom.chilledDeliveryProductAvailability=true;
		  }
		  if( pli.optionProductLineItems.size() > 0 && pli.custom.engravingMessageLine1 !=null){
		      basket.custom.engravedProductAvailability=true;
		      break;
		  }
	}
}