/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* 
*   INPUT:
*   @input CurrentHttpParameterMap : dw.web.HttpParameterMap
*	@input Basket : dw.order.Basket 
*   OUTPUT:
*   @output ProductsMap : dw.util.Map
* @output msgMap : dw.util.Map
*
*/

importPackage( dw.catalog );
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.web );
importPackage( dw.order );

function execute( pdict : PipelineDictionary ) : Number
{
   
   
   session.privacy.isValidage="true";
   var basket : Basket = pdict.Basket;
   var lineItems : List = new ArrayList();
   if(basket != null){
    lineItems = basket.productLineItems;
   }
   var prodMap : HttpParameterMap=pdict.CurrentHttpParameterMap.getParameterMap("pid");
   var qtyMap : HttpParameterMap=pdict.CurrentHttpParameterMap.getParameterMap("qty");
   var engravingMsgMap : HttpParameterMap=pdict.CurrentHttpParameterMap.getParameterMap("msg");
   var productsMap : HashMap = new HashMap();
   var msgMap : HashMap = new HashMap();
   var msgMap: HashMap=new HashMap();
   var j=0;
    var pset : Set =pdict.CurrentHttpParameterMap.parameterNames;
	for (var i=1; i<=prodMap.parameterCount; i++) {
		
		var BasketProdQty : Number;
		var flag : Boolean = false;
		var finalQty : Number;
		//var ProdQTY : Number = new Number(Qty[i]);
			if(!productsMap.containsKey(prodMap[i].toString())){
		
				productsMap.put(prodMap[i].toString(), new Number( qtyMap[i]));
				if(engravingMsgMap[i]!=null)
				msgMap.put(prodMap[i].toString(),engravingMsgMap[i].toString());
			}else{
			productsMap.put(prodMap[i].toString()+"-"+ j, new Number( qtyMap[i]));
			if(engravingMsgMap[i]!=null)
				msgMap.put(prodMap[i].toString()+"-"+ j,engravingMsgMap[i].toString());
			j++;
			}
	}
    pdict.ProductsMap = productsMap;
    pdict.msgMap=msgMap;
   return PIPELET_NEXT;
}
