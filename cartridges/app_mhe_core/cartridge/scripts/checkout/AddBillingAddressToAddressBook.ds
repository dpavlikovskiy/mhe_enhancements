/**
* AddAddressToAddressBook.ds
*
* This script attempts to add the given order address to the 
 * address book of the current customer profile.
* The address attribute "city" is used to generate the address 
 * ID within the address book. 
 *
* @input Profile : dw.customer.Profile
* @input OrderAddress : dw.order.OrderAddress
* @input AddressForm : dw.web.FormGroup The address form.
 

*/
importPackage( dw.customer );
importPackage( dw.order );
importPackage( dw.system );
importPackage( dw.web ); 
importPackage(dw.util);

importScript( "account/Utils.ds" );

function execute( pdict : PipelineDictionary ) : Number
{
 
      var addressBook : AddressBook = pdict.Profile.addressBook;
      var usedAddress : OrderAddress = pdict.OrderAddress;
      var addressForm : FormGroup = pdict.AddressForm.addressFields;
      
      /*var addAddress:Boolean=true;
      var addressList: List =addressBook.getAddresses();
      var addIterator: Iterator =addressList.iterator();
	  while(addIterator.hasNext()){
	    var address:CustomerAddress =addIterator.next();
		    if(address.ID.toString().equalsIgnoreCase(addressForm.addressName.value)){ 
      			 addAddress=false;
      			 break;
		    }
	  }
	
	if(addAddress){*/
	  
      if(usedAddress == null)
      {
            Logger.debug("Cannot add address to address book, without given order address.");
            return PIPELET_ERROR;
      }
      
      // get a possible equivalent address from the address book
      var address : CustomerAddress = getEquivalentAddress(addressBook, usedAddress);

      // create the new address, if no equavalent address was found 
      // and copy the address attributes
      if(address == null)
      {
            var addressID : String=null;
            var addressName:String=empty(addressForm.addressName.value)?"":addressForm.addressName.value.toUpperCase();
            // get a unique address ID
            if(addressName==null || empty(addressName)){
                addressID= determineUniqueAddressID(usedAddress.city, addressBook);
                /*addressID=StringUtils.trim(addressID.toUpperCase());
                
                	while(addressID.indexOf(' ') >=0)
					{
						addressID = addressID.replace(' ','-');
					}*/
            }else{
            	addressID=addressName;
                 /* addressID=StringUtils.trim(addressName);
                  while(addressID.indexOf(' ') >=0)
					{
						addressID = addressID.replace(' ','-');
					}*/
            }
            // check on empty address ID
            if(empty(addressID))
            {
                  Logger.debug("Cannot add address to address book, with empty address ID.");
                  return PIPELET_ERROR;
            }
            try{
            address = addressBook.createAddress( addressID );
            }
            catch(e){
                  address=addressBook.getAddress(addressID);
            }
            if(address==null)
            {
            address=addressBook.getAddress(addressID);
            }
            
            address.custom.addressType="billing";
	        address.custom.fiscalCode=addressForm.fiscalCode.value;
	        address.custom.vatNumber=addressForm.vatNumber.value;
            address.setTitle( usedAddress.title );
            address.setFirstName( usedAddress.firstName );
            address.setLastName( usedAddress.lastName );
            address.setAddress1( usedAddress.address1 );
            address.setAddress2( usedAddress.address2 );
            address.setCompanyName( usedAddress.companyName );
            address.setCity( usedAddress.city );
            address.setPostalCode( usedAddress.postalCode );
            address.setStateCode( usedAddress.stateCode );
            address.setCountryCode( usedAddress.countryCode.value );
      }
      
      // update the phone in either the equivalent found address
      // or in the newly created address
      address.setPhone( usedAddress.phone );
	 // }
	  
    return PIPELET_NEXT;
}
