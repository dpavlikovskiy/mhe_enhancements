/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input date : String
*   @input startHour : Number
*   @input endHour : Number
*   @input timeslot : Number
*   @input shipment : String
*   @output timeSlotArray : Array
*
*/
importPackage( dw.system );
importPackage( dw.order );
 importPackage( dw.value );
 importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	
	
	
	var cal : Calendar = new Calendar(new Date());
	
	cal.setTimeZone(dw.system.Site.getCurrent().timezone);
	var currentHour :Number= cal.get(Calendar.HOUR);
	var am_pm : Number = cal.get(Calendar.AM_PM);
	
	var hashMap: SortedMap= new SortedMap();
    var date : Date= new Date(pdict.date);
    var currDate : Date = new Date();
   	var startHour: Number=pdict.startHour;
   	var endhour: Number=pdict.endHour;
   	var	timeslotduration:Number=pdict.timeslot;
   	var slectedDate: String= StringUtils.formatCalendar(new Calendar(date), "M-d-yyyy" );
    var shippingMethods : Collection = ShippingMgr.getAllShippingMethods();
	var shippingMethodsIt : Iterator = ShippingMgr.getAllShippingMethods().iterator();
	var timeArrayy: Array=new Array();
    
    if(am_pm == 1)
    {
    	currentHour = currentHour + 12;
    }
    while(shippingMethodsIt.hasNext())
	{
		var shippingMethod : ShippingMethod = shippingMethodsIt.next();
		
		if (shippingMethod.ID.equalsIgnoreCase(pdict.shipment))
		{
			
			 var timeArr: ArrayList =new ArrayList();
			if("deactivedDeliveryTime" in shippingMethod.custom ){
			 var disbaledTime : Array=shippingMethod.custom.deactivedDeliveryTime;
			 for each (time in disbaledTime){
		 	var timeslot : String=time;
			 	if(timeslot.indexOf(slectedDate)>-1){
			 		var ts: String=timeslot.split(" ")[1];
			 		var startTime: String=parseInt(ts.split("-")[0].toString());
			 		var finalTime : String=parseInt(ts.split("-")[1].toString());
			 		
			 	
			 		while(startTime<finalTime){
			 		timeArr.add(startTime);
			 		startTime=startTime+1;
			 		}
			 		
			 	}
			 
			 }
			
			}
			 while(startHour<endhour){
	
					var endtime=startHour+timeslotduration;
					if (date.getDate() == currDate.getDate()){
			
					if(currentHour<startHour && !timeArr.contains(startHour.valueOf())){
					timeArrayy.push(startHour+":00 - "+endtime+":00,enabled");
					//hashMap.put(startHour+":00 - "+endtime+":00", "enabled")
					}else{
						timeArrayy.push(startHour+":00 - "+endtime+":00,disabled");
					//hashMap.put(startHour+":00 -"+endtime+":00", "disabled")
					}
					startHour=startHour+timeslotduration;
					
					}
					else
					{
					if(!timeArr.contains(startHour.valueOf())){
					timeArrayy.push(startHour+":00 - "+endtime+":00,enabled");
					//hashMap.put(startHour+":00 - "+endtime+":00", "enabled")
					}else{
						timeArrayy.push(startHour+":00 - "+endtime+":00,disabled");
					//hashMap.put(startHour+":00 -"+endtime+":00", "disabled")
					}
					startHour=startHour+timeslotduration;
					}
		}
		}
	}
    
	pdict.timeSlotArray = timeArrayy;
	return PIPELET_NEXT
}

