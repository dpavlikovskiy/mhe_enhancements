<iscache type="relative" hour="24" varyby="price_promotion" />
<isinclude template="util/modules" />
<isscript> importScript("util/ProductImageSO.ds"); </isscript>
<iscomment> This template renders a product in the search
result using a ProductSearchHit object. </iscomment>

<isif condition="${!empty(pdict.Product) }"> 
<isscript>
	importScript('product/ProductUtils.ds'); 
</isscript> 
<iscomment>Set the product of the product search hit locally for reuse</iscomment> 
<isset name="Product" value="${pdict.Product}" scope="page" /> 
<isset name="OrgProduct" value="${null}" scope="page" /> 

<iscomment>Get the sizes selectable from the current product master or variant range if we need to determine them based on a search result. </iscomment> 
<isscript>
	var selectableSize : dw.util.Collection = new dw.util.ArrayList(); 
	var varAttrSize : dw.catalog.ProductVariationAttribute = null; 
	var selectedSize: dw.catalog.ProductVariationAttributeValue = null;
	
	var onlyMagnum : Boolean = false; 
	var isGift : Boolean = false;
	var displayBadge : Boolean = false; 
	if(Product.master){ 
		var varModel : dw.catalog.ProductVariationModel = Product.variationModel; 
		//varAttrSize = varModel.getProductVariationAttribute("color"); 
		/** This is to create swatches as per the the size attribute -- Naveen Kumar */ 
		varAttrSize = varModel.getProductVariationAttribute("size"); 
		if( varAttrSize != null ){ 
			selectableSize = Product.variationModel.getFilteredValues(varAttrSize); 
		} 
		/** Check if packery is enabled/disabled for Content Editing **/
		if (!('enableCEOnPLP' in dw.system.Site.current.preferences.custom) || !dw.system.Site.current.preferences.custom.enableCEOnPLP){
			/** check if only magnum size is available */ 
			if (selectableSize.size() == 1 && (selectableSize.get(0).value == 150 || selectableSize.get(0).value == 175)){
				onlyMagnum = true; 
			}
			if ('isGift' in Product.custom && Product.custom.isGift) {
			 isGift = true;
			} 
		}
	} else if (!Product.master && !Product.variant){
		if ('size' in Product.custom && (Product.custom.size == 150 || Product.custom.size == 175)) {
			onlyMagnum = true;
		}
		if ('isGift' in Product.custom && Product.custom.isGift) {
			isGift = true;
		}
	}
		
	var firstProduct : dw.catalog.Product = pdict.FirstProduct; 
	if( firstProduct && firstProduct.variant && varAttrSize != null ) { 
		selectedSize = firstProduct.variationModel.getSelectedValue( varAttrSize ); 
	} 
	/** Set if the badge needs to be displayed or not */ 
	displayBadge = ProductUtils.displayBadge(Product); 
</isscript> 
<iscomment> Generate link to product detail page: by default it's just the product of the product search hit. 
	If a size variation is available, the first size is used as link URL. 
</iscomment> 

<isset name="firstSizeVariation" value="${null}"
	scope="page" /> <isset name="productUrl"
	value="${URLUtils.http('Product-Show', 'pid', Product.ID)}"
	scope="page" /> <isif
	condition="${!empty(selectableSize) && selectableSize.size() > 0 && !empty(varAttrSize)}">

<iscomment>if we have a selected size, this size is highlighted otherwise the first selectable size is hightlighted</iscomment> 

<isif condition="${!empty(selectedSize)}">
	<isset name="firstSizeVariation" value="${selectedSize}" scope="page" /> 
<iselse>
	<isset name="firstSizeVariation" value="${selectableSize.get(0)}" scope="page" />
</isif> 
<iscomment>
	<isif condition="${!empty(varAttrSize)}">
		<isset name="productUrl" value="${pdict.Product.variationModel.url('Product-Show', varAttrSize, firstSizeVariation)}" scope="page" />
	</isif> 
</iscomment>
	</isif> <iscomment>append the paging parameters
to the product URL</iscomment> <iscomment>
<isset name="productUrl"
	value="${productUrl.append('start', pdict.CurrentHttpParameterMap.starting.stringValue)}"
	scope="page" /></iscomment> <iscomment>append the search query
parameters to the product URL</iscomment> <isif
	condition="${!empty(pdict.ProductSearchResult)}"> <isset
	name="productUrl" value="${productUrl}" scope="page" /> </isif>
<isif condition="${onlyMagnum}">
	<div class="products-tile-inner products-tile-inner-magnum" id="${Product.UUID}" data-itemid="${Product.ID}">
<iselseif condition="${isGift}" >
     <div class="products-tile-inner products-tile-inner-gift" id="${Product.UUID}" data-itemid="${Product.ID}">	
<iselse>
	<div class="products-tile-inner" id="${Product.UUID}" data-itemid="${Product.ID}">
</isif>
	<div class="products-tile-bg"></div>

	<div class="product-image">
		<!-- dwMarker="product" dwContentID="${Product.UUID}" -->
		<iscomment>Image ++++ Modified to get the Badge Image</iscomment>
		<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
		<isif condition="${displayBadge}"> <img class="product-image-badge"
			src="${ProductUtils.getBadgeImage(Product.custom.badge)}" /> </isif>
		<iscomment>Display Promotional Text if Only Magnum Size is
		Available</iscomment>

		<isif condition="${onlyMagnum}"> <iscontentasset
			aid="magnum_promo_text" /> </isif>

		<iscomment>Render the thumbnail</iscomment>
	
		<isset name="image" value="${null}" scope="page" />
					
		<iscomment>Determine the correct image, either first
		displayed size variation or default product thumbnail</iscomment>
		<isif condition="${!empty(selectableSize) && selectableSize.size() > 0}">
			<isif condition="${!empty(selectedSize)}"> 
				<isset name="firstSizeVariation" value="${selectedSize}" scope="page" /> 
			<iselse>
				<isset name="firstSizeVariation" value="${selectableSize.get(0)}" scope="page" />
			</isif> 
		</isif>
 			
		<isif condition="${Product.getImage('hi-res',0) != null}"> 
			<isif condition="${onlyMagnum}">
				<isset name="image" value="${ new ProductImage('magnum', Product, 0 ) }" scope="page" /> 
			<iselse>
				<isset name="image" value="${ new ProductImage('plp', Product, 0 ) }" scope="page" /> 
			</isif>
		</isif>	
		

		<iscomment>If image couldn't be determined, display a "no
		image" medium</iscomment>
		<iscomment>Fix for Error Log - "image" is not defined. </iscomment>
		<isif condition="${image!=null && !empty(image)}"> <isset name="thumbnailUrl"
			value="${image.getURL()}" scope="page" /> <isset name="thumbnailAlt"
			value="${Product.name}" scope="page" /> <isset name="thumbnailTitle"
			value="${Product.name}" scope="page" /> <iselse> <isset
			name="thumbnailUrl"
			value="${URLUtils.staticURL('/images/noimagemedium.png')}"
			scope="page" /> <isset name="thumbnailAlt" value="${Product.name}"
			scope="page" /> <isset name="thumbnailTitle" value="${Product.name}"
			scope="page" /></isif>

		<a class="thumb-link" href="${productUrl}">
			<img src="${thumbnailUrl}" alt="${thumbnailAlt}" />
		</a>

	</div>

	<iscomment>Product's Brand'</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	<div class="product-brand">
		<h2>
			<isprint value="${Product.custom.mheBrand}" />
		</h2>
	</div>

	<iscomment>Product Name</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	<div class="product-name">
		<h2>
			<a class="name-link" href="${productUrl}">
				<isprint value="${Product.name}" /> </a>
		</h2>
	</div>
	<iscomment>Box Description </iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	<div class="productBoxDescription">
		<isif condition="${!empty(pdict.Product.custom.boxDescription)}">
			<isprint value="${pdict.Product.custom.boxDescription}" />
		</isif>
	</div>
	
	<iscomment>Pricing</iscomment>
	<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>
	
	<iscomment>Added for promotional pricing </iscomment>
	<isset name="promos" value="${dw.campaign.PromotionMgr.activeCustomerPromotions.getProductPromotions(pdict.Product)}" scope="page"/>
	<isset name="PromotionalPrice" value="${dw.value.Money.NOT_AVAILABLE}" scope="page"/>
	<isset name="isPromoPrice" value="${false}" scope="page"/>
	<isif condition="${! empty(promos)}">
		<isloop items="${promos}" var="promo">
			<isif condition="${promo.getPromotionClass() != null && promo.getPromotionClass().equals(dw.campaign.Promotion.PROMOTION_CLASS_PRODUCT)}">
				<isif condition="${pdict.Product.optionProduct}">
					<isif condition="${pdict.CurrentOptionModel != null}">
						<isset name="PromotionalPrice" value="${promo.getPromotionalPrice(pdict.Product, pdict.CurrentOptionModel)}" scope="page"/>
					<iselse>
						<isset name="PromotionalPrice" value="${promo.getPromotionalPrice(pdict.Product, pdict.Product.getOptionModel())}" scope="page"/>
					</isif>
				<iselse>
					<isset name="PromotionalPrice" value="${promo.getPromotionalPrice(pdict.Product)}" scope="page"/>
				</isif>
			</isif>
			<isbreak/>
		</isloop>	
	</isif>
	

	<div class="product-pricing">

		<iscomment>Renders pricing information depending on the
		option or variation model, as well as scaled prices and so on.</iscomment>
		<isset name="currencyCode"
			value="${dw.system.Site.getCurrent().getDefaultCurrency()}" scope="page" />
		<isif condition="${Product.productSet}"> <iscomment>Product
		set pricing</iscomment> <span class="product-set-price">${Resource.msg('global.buyall','locale',null)}</span>

		<iselseif
			condition="${Product.master && pdict.CurrentHttpParameterMap.pricerange.stringValue == 'true'}">
		<iscomment>Product master price range depending on the
		represented variants</iscomment> <h3 class="product-sales-price"><isprint
				value="${dw.util.StringUtils.formatMoney(dw.value.Money(pdict.CurrentHttpParameterMap.minprice, currencyCode))}" />
			- <isprint
				value="${dw.util.StringUtils.formatMoney(dw.value.Money(pdict.CurrentHttpParameterMap.maxprice, currencyCode))}" />
		</h3> <iselse> <iscomment>For Product master without a
		price range get the pricing from firstRepresentedProduct </iscomment> <isif
			condition="${Product.master && pdict.CurrentHttpParameterMap.pricerange.stringValue != 'true'}" />
		<iscomment>Preserve current product instance</iscomment> <isset
			name="OrgProduct" value="${Product}" scope="page" /> <isset
			name="Product" value="${pdict.FirstProduct}" scope="page" /></isif>
		<iscomment> Regular pricing through price model of the
		product. If the product is an option product, we have to initialize
		the product price model with the option model. </iscomment>
		<isif condition="${Product.optionProduct}"> <isset
			name="PriceModel"
			value="${Product.getPriceModel(Product.getOptionModel())}"
			scope="page" /> <iselse> <isset name="PriceModel"
			value="${Product.getPriceModel()}" scope="page" /></isif>

		<iscomment> Check whether the product has price in the
		sale pricebook. If so, then display two prices: crossed-out standard
		price and sales price. </iscomment>
		<isinclude template="product/components/standardprice" />
		<isset name="SalesPrice" value="${PriceModel.getPrice()}" scope="page" />
		<isset name="ShowStandardPrice"
			value="${StandardPrice.available && SalesPrice.available && StandardPrice.compareTo(SalesPrice) == 1}"
			scope="page" />

		<iscomment>Added for promotional pricing </iscomment>		
		<isif condition="${PromotionalPrice.available && SalesPrice.compareTo(PromotionalPrice) != 0}">
			<isset name="ShowStandardPrice" value="${true}" scope="page"/>
			<isset name="StandardPrice" value="${SalesPrice}" scope="page"/>
			<isset name="SalesPrice" value="${PromotionalPrice}" scope="page"/>
			<isset name="isPromoPrice" value="${true}" scope="page"/>
		</isif>
		

		<isif condition="${ShowStandardPrice}">
		<div class="product-discounted-price">
			<h3 class="product-standard-price">
				<isprint value="${StandardPrice}" />
			</h3>
			
				<iscomment>Added for promotional pricing </iscomment>
				<h3 class="product-sales-price"><isif condition="${(SalesPrice.valueOrNull != null && SalesPrice.valueOrNull > 0) || isPromoPrice}"><isprint value="${SalesPrice}"/><iselse>${Resource.msg('pricing.noprice','product',null)}</isif></h3>
				<iscomment><h3 class="product-sales-price"><isprint value="${SalesPrice}"/></h3></iscomment>
		
		</div>
		<iselse>
		<h3 class="product-sales-price">
			<isprint value="${SalesPrice}" />
		</h3></isif>

		<isif condition="${!empty(OrgProduct)}"> <iscomment>Restore
		current product instance</iscomment> <isset name="Product" value="${OrgProduct}"
			scope="page" /> <isset name="OrgProduct" value="${null}" scope="page" />
		</isif>
</isif>

</div>

<iscomment>Promotion</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<iscomment>Render information on active product promotions </iscomment>
<isset name="promos" value="${dw.campaign.PromotionMgr.activeCustomerPromotions.getProductPromotions(Product)}"	scope="page"/>
<isif condition="${!empty(promos)}">
	<div class="product-promo">
		<isloop items="${promos}" var="promo" status="promoloopstate">
			<a href="${productUrl}" class="promo-msg">
				<isprint value="${promo.calloutMsg}" encoding="off" />
			</a>
			<isbreak/>
		</isloop>
	</div>
</isif> 

<iscomment>Compare +++++++ Commented</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<iscomment> Render the compare checkbox, if search result is
based on a category context. The checkbox is displayed if either the
category or one of its parent categories has the custom attribute
"enableCompare" set to true. <isif
	condition="${!empty(pdict.CurrentHttpParameterMap.cgid.value) && ProductUtils.isCompareEnabled(pdict.CurrentHttpParameterMap.cgid.value)}">
<div class="product-compare">
	<isif condition="${!Product.productSet && !Product.bundle}"> <isscript>
	// mark the compare checkbox checked if the current product is // in
	the current comparison list for the current category importScript(
	"catalog/libCompareList.ds" ); importScript( "common/libJson.ds" ); var
	comparison = GetProductCompareList(); // Set the category
	if(!empty(pdict.ProductSearchResult &&
	!empty(pdict.ProductSearchResult.category) ))
	comparison.setCategory(pdict.ProductSearchResult.category.ID); var
	comparisonProducts = null; if (comparison) { comparisonProducts =
	comparison.getProducts(); } var checkedStr = ''; if
	(!empty(comparisonProducts)) { var pIt = comparisonProducts.iterator();
	var productId = null; while (pIt.hasNext()) { productId = pIt.next();
	if (productId == Product.ID) { checkedStr = 'checked=true'; break; } }
	} </isscript> <input type="checkbox" class="compare-check"
		id="${'cc-'+Product.UUID}" ${checkedStr}/> <label
		for="${'cc-'+Product.UUID}">Compare</label> </isif>
</div>

</isif> </iscomment>
<iscomment>Reviews +++++++++ Commented</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

<isif condition="${!Product.productSet}"> <isinclude
	template="product/components/reviewsmini" /> </isif> </iscomment>

<iscomment>Swatches</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<iscomment> Render the size swatch secion for a product
search hit. The swatches depend on the products the search hit actually
represents. Doesn't necessarily equal all variants of a product master,
since only a sub set of variants could be represented by the search hit
(a variant group). We show size swatches only for variant groups
represented by a product search hit. </iscomment>

<isif
	condition="${(!empty(selectableSize) && selectableSize.size() > 1 && !empty(varAttrSize)) || onlyMagnum}">

<isscript> /* Get Top Level category, to create the key for
getting Serving and Volume Info */ var rootCategory =
Product.primaryCategory; while( rootCategory.parent.ID != "root") {
rootCategory = rootCategory.parent; } </isscript>

<div class="product-swatches">
	<iscomment>render the palette, the first swatch is always preselected</iscomment>
	<ul class="swatch-list">
<isloop items="${selectableSize}" var="sizeValue" status="varloop">
<iscomment>Creating the Key for getting Serving and Volume
Info from SitePref</iscomment> <isset name="key"
	value="${rootCategory.ID + '-' + sizeValue.value}" scope="page" /> <iscomment>Determine
the swatch and the thumbnail for this size</iscomment> <isset name="sizeSwatch"
	value="${sizeValue.getImage('swatch')}" scope="page" /> <isset
	name="sizeThumbnail" value="${sizeValue.getImage('medium')}"
	scope="page" /> <iscomment>If images couldn't be
determined, display a "no image" thumbnail</iscomment> <isif
	condition="${!empty(sizeSwatch)}"> <isset name="swatchUrl"
	value="${sizeSwatch.getURL()}" scope="page" /> <isset name="swatchAlt"
	value="${sizeSwatch.alt}" scope="page" /> <isset name="swatchTitle"
	value="${sizeSwatch.title}" scope="page" /> <iselse> <isset
	name="swatchUrl"
	value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page" />
<isset name="swatchAlt" value="${sizeValue.displayValue}" scope="page" />
<isset name="swatchTitle" value="${sizeValue.displayValue}" scope="page" /></isif>
<isif condition="${!empty(sizeThumbnail)}"> <isset
	name="thumbnailUrl" value="${sizeThumbnail.getURL()}" scope="page" /> <isset
	name="thumbnailAlt" value="${Product.name}" scope="page" /> <isset
	name="thumbnailTitle" value="${Product.name}" scope="page" /> <iselse>
<isset name="thumbnailUrl"
	value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page" />
<isset name="thumbnailAlt" value="${Product.name}"
	scope="page" /> <isset name="thumbnailTitle"
	value="${Product.name}" scope="page" /></isif> <isif
	condition="${!empty(selectedSize)}"> <isset
	name="preselectCurrentSwatch"
	value="${sizeValue.value == selectedSize.value}" scope="page" /> <iselse>
<isset name="preselectCurrentSwatch" value="${varloop.first}"
	scope="page" /></isif> <iscomment>build the proper URL and append
the search query parameters</iscomment> <isset name="swatchproductUrl"
	value="${Product.variationModel.url('Product-Show', varAttrSize, sizeValue.value)}"
	scope="page" /> <isif condition="${!empty(pdict.ProductSearchResult)}">
<isset name="swatchproductUrl"
	value="${pdict.ProductSearchResult.url( swatchproductUrl )}"
	scope="page" /> </isif> <isset name="serving"
	value="${ProductUtils.getValueFromSitePrefEnum('stdBottleEquivalent', key)}"
	scope="page" /> <isset name="volume"
	value="${ProductUtils.getValueFromSitePrefEnum('sizeVolume', key)}"
	scope="page" /> <iscomment>render a single swatch, the url
to the proper product detail page is contained in the href of the swatch
link</iscomment>
<li><a href="${productUrl}" class="swatch ${ProductUtils.getClassNameForSize(sizeValue.value)} ${(preselectCurrentSwatch) ? 'selected' : ''}"> 
	<div class="tooltip-content">
        <p>${sizeValue.displayValue}</p>
        <p>${serving}</p>
        
    </div>
	<iscomment>
		<img
			src="${swatchUrl}" alt="${swatchAlt}"
			data-thumb='{"src":"${thumbnailUrl}","alt":"${thumbnailAlt}","title":"${thumbnailTitle}","serve":"${serving}","vol":"${volume}"}' />
	</iscomment>
	</a></li>

</isloop>

</ul>

</div>

</isif>

</div>


</isif>